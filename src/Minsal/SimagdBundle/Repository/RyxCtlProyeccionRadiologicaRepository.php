<?php

namespace Minsal\SimagdBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * RyxCtlProyeccionRadiologicaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RyxCtlProyeccionRadiologicaRepository extends EntityRepository
{
    public function data($bs_filters = array())
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder('expl')
                            ->select('expl')
                            ->addSelect('exm')

                            ->addSelect('expl.id AS id, expl.nombre AS nombre, expl.codigo AS codigo, exm.descripcion AS examen, exm.idestandar as codigo_examen, expl.descripcion as descripcion, expl.fechaHoraReg AS fecha_registro, expl.fechaHoraMod AS fecha_edicion')

                            ->addSelect('IDENTITY(exm.idAtencion) AS exm_id_atencion')
                            ->addSelect('usrRg.username AS expl_usernameUserReg, usrRg.id AS expl_id_userReg, usrMd.username AS expl_usernameUserMod, usrMd.id AS expl_id_userMod')
                            ->addSelect('CONCAT(COALESCE(usrRgEmp.apellido, \'\'), \', \', COALESCE(usrRgEmp.nombre, \'\')) AS expl_nombreUserReg')
                            ->addSelect('CASE WHEN (usrMd.username IS NOT NULL) THEN CONCAT(COALESCE(usrMdEmp.apellido, \'\'), \', \', COALESCE(usrMdEmp.nombre, \'\')) ELSE \'\' END AS expl_nombreUserMod')
                            ->addSelect('CASE WHEN (sex.id IS NOT NULL) THEN sex.nombre ELSE \'Todos los sexos\' END AS exm_sexo')
                            ->from('MinsalSimagdBundle:ImgCtlProyeccion', 'expl')
                            ->innerJoin('expl.idExamenServicioDiagnostico', 'exm')
                            ->leftJoin('exm.idsexo', 'sex')
                            ->innerJoin('expl.idUserReg', 'usrRg')
                            ->leftJoin('expl.idUserMod', 'usrMd')
                            ->innerJoin('usrRg.idEmpleado', 'usrRgEmp')
                            ->leftJoin('usrMd.idEmpleado', 'usrMdEmp')
                            ->orderBy('exm.id', 'DESC')
                            ->addOrderBy('expl.id', 'DESC')
                            ->distinct();

        /*
         * --| add filters from BSTABLE_FILTER to query
         */
        $simagd_er_model    = $this->getEntityManager()->getRepository('MinsalSimagdBundle:ImgSolicitudEstudio');
        $apply_filters      = $simagd_er_model->getBsTableFiltersV2($query, $bs_filters);
        if ($apply_filters !== false)
        {
            $query->andWhere($apply_filters);
        }
        /*
         * |-- END filters from BSTABLE_FILTER to query
         */

        return $query->getQuery()->getScalarResult();
    }

    public function localData($id_estab, $bs_filters = array())
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder('explrz')
                            ->select('explrz')
                            ->addSelect('expl')
                            ->addSelect('mr')
                            ->addSelect('exm')
                            ->addSelect('m')

                            ->addSelect('explrz.id AS id, expl.nombre AS nombre, expl.codigo AS codigo, exm.descripcion AS examen, exm.idestandar as codigo_examen, m.nombrearea AS modalidad, m.idarea as codigo_modalidad, expl.descripcion as descripcion, expl.fechaHoraReg AS fecha_registro, expl.fechaHoraMod AS fecha_edicion, explrz.fechaHoraReg AS fecha_registro_local, explrz.fechaHoraMod AS fecha_edicion_local, explrz.habilitado AS habilitado')

                            ->addSelect('IDENTITY(exm.idAtencion) AS exm_id_atencion, IDENTITY(m.idAtencion) AS m_id_atencion')
                            ->addSelect('usrRg.username AS explrz_usernameUserReg, usrRg.id AS explrz_id_userReg, usrMd.username AS explrz_usernameUserMod, usrMd.id AS explrz_id_userMod')
                            ->addSelect('CONCAT(COALESCE(usrRgEmp.apellido, \'\'), \', \', COALESCE(usrRgEmp.nombre, \'\')) AS explrz_nombreUserReg')
                            ->addSelect('CASE WHEN (usrMd.username IS NOT NULL) THEN CONCAT(COALESCE(usrMdEmp.apellido, \'\'), \', \', COALESCE(usrMdEmp.nombre, \'\')) ELSE \'\' END AS explrz_nombreUserMod')
                            ->addSelect('CASE WHEN (sex.id IS NOT NULL) THEN sex.nombre ELSE \'Todos los sexos\' END AS exm_sexo')
                            ->from('MinsalSimagdBundle:ImgCtlProyeccionEstablecimiento', 'explrz')
                            ->innerJoin('explrz.idProyeccion', 'expl')
                            ->innerJoin('explrz.idAreaExamenEstab', 'mr')
                            ->innerJoin('mr.idAreaServicioDiagnostico', 'm')
                            ->innerJoin('expl.idExamenServicioDiagnostico', 'exm')
                            ->leftJoin('exm.idsexo', 'sex')
                            ->innerJoin('explrz.idUserReg', 'usrRg')
                            ->leftJoin('explrz.idUserMod', 'usrMd')
                            ->innerJoin('usrRg.idEmpleado', 'usrRgEmp')
                            ->leftJoin('usrMd.idEmpleado', 'usrMdEmp')
                            ->where('mr.idEstablecimiento = :id_est')
                            ->setParameter('id_est', $id_estab)
                            ->orderBy('m.id', 'DESC')
                            ->addOrderBy('exm.id', 'DESC')
                            ->addOrderBy('expl.id', 'DESC')
                            ->distinct();

        /*
         * --| add filters from BSTABLE_FILTER to query
         */
        $simagd_er_model    = $this->getEntityManager()->getRepository('MinsalSimagdBundle:ImgSolicitudEstudio');
        $apply_filters      = $simagd_er_model->getBsTableFiltersV2($query, $bs_filters);
        if ($apply_filters !== false)
        {
            $query->andWhere($apply_filters);
        }
        /*
         * |-- END filters from BSTABLE_FILTER to query
         */

        return $query->getQuery()->getScalarResult();
    }

    public function getRadiologicalProceduresGrouped($id_estabLocal, $id_atencion = '97', $return = 'scalar')
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('m.id AS id_m, expl.id AS id_expl')
                            ->from('MinsalSimagdBundle:ImgCtlProyeccion', 'expl')
                            ->innerJoin('MinsalSimagdBundle:ImgCtlProyeccionEstablecimiento', 'explrz',
                                    \Doctrine\ORM\Query\Expr\Join::WITH,
                                    'expl.id = explrz.idProyeccion')
                            ->innerJoin('explrz.idAreaExamenEstab', 'mr')
                            ->innerJoin('mr.idAreaServicioDiagnostico', 'm')
                            ->where('mr.idEstablecimiento = :id_est')
                            ->setParameter('id_est', $id_estabLocal)
                            ->andWhere('m.idAtencion = :id_atn')
                            ->setParameter('id_atn', $id_atencion)
                            ->andWhere('mr.imgHabilitado = TRUE')
                            ->andWhere('explrz.habilitado = TRUE')
                            ->groupBy('m.id')
                            ->addGroupBy('expl.id')
                            ->orderBy('m.id', 'DESC')
                            ->addOrderBy('expl.id', 'DESC')
                            ->distinct();

        return $return == 'query' ?
        $query : ($return == 'scalar' ? $query->getQuery()->getScalarResult()
        : $query->getQuery()->getResult()
        );
    }

}