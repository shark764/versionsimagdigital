<?php

namespace Minsal\SimagdBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * NotaDiagnosticoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NotaDiagnosticoRepository extends EntityRepository
{
    public function obtenerAccesoNotDiagEstab($id, $idEstab)
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('notdiag.id as notdiagId')
                            ->from('MinsalSimagdBundle:ImgNotaDiagnostico', 'notdiag')
                            ->where('notdiag.id = :id_notdiag')
                            ->setParameter('id_notdiag', $id)
                            ->andWhere('notdiag.idEstablecimiento = :id_est')
                            ->setParameter('id_est', $idEstab);

        $query->distinct();
        $query->setMaxResults(1);
        
        return $query->getQuery()->getOneOrNullResult() ? true : false;
    }
    
    public function obtenerAccesoNotDiag($id, $idUser)
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('notdiag.id as notdiagId')
                            ->from('MinsalSimagdBundle:ImgNotaDiagnostico', 'notdiag')
                            ->where('notdiag.id = :id_notdiag')
                            ->setParameter('id_notdiag', $id)
                            ->andWhere('notdiag.idUserReg = :id_user_notdiag_reg')
                            ->setParameter('id_user_notdiag_reg', $idUser);

        $query->distinct();
        $query->setMaxResults(1);
        
        return $query->getQuery()->getOneOrNullResult() ? true : false;
    }
    
    public function obtenerNotasDiagnostico($id_estab, $bs_filters = array())
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('notdiag', 'diag')
                            ->from('MinsalSimagdBundle:ImgNotaDiagnostico', 'notdiag')
                            ->innerJoin('notdiag.idDiagnostico', 'diag')
                            ->where('notdiag.idEstablecimiento = :id_est_diag')
                            ->setParameter('id_est_diag', $id_estab)
                            ->orderBy('notdiag.fechaEmision', 'desc')
                            ->addOrderBy('diag.fechaAprobado', 'desc')
                            ->addOrderBy('notdiag.id', 'desc');
        $query->distinct();
        
        return $query->getQuery()->getResult();
    }

    public function obtenerNotasDiagnosticoV2($id_estab, $bs_filters = array())
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder('notdiag')
                            ->select('notdiag')
                            ->addSelect('diag')
                            ->addSelect('lct')
                            ->addSelect('explocal')->addSelect('unknExp')
                            ->addSelect('prAtn')
                            ->addSelect('statusdiag.id as diag_id_estado, statusdiag.nombreEstado as diag_estado, statusdiag.codigo as diag_codEstado, tipoN.nombreTipo as notdiag_tipoNota, tipoN.codigo as notdiag_codTipo, tipoN.id as notdiag_id_tipoNota')
                            ->addSelect('prc.fechaCreacion as prc_fechaCreacion, est.id as est_id, est.fechaEstudio as est_fechaEstudio, est.url as est_url, prz.fechaAlmacenado as prz_fechaAlmacenado')
                            ->addSelect('concat(pct.primerApellido, \' \', coalesce(pct.segundoApellido, \'\'), \', \', pct.primerNombre, \' \', coalesce(pct.segundoNombre, \'\')) as prc_paciente')
                            ->addSelect('stdroot.nombre as prc_origen, stdroot.id as prc_id_origen, ar.nombre as prc_areaAtencion, ar.id as prc_id_areaAtencion, atn.nombre as prc_atencion, atn.id as prc_id_atencion')
                            ->addSelect('concat(coalesce(empnotdiag.apellido, \'\'), \', \', coalesce(empnotdiag.nombre, \'\')) as notdiag_emisorNota, empnotdiag.id as notdiag_id_emisorNota, tpEmp.tipo as notdiag_tipoEmpleado')
                            ->addSelect('concat(coalesce(diagEmp.apellido, \'\'), \', \', coalesce(diagEmp.nombre, \'\')) as diag_transcriptor, diagEmp.id as diag_id_transcriptor')
                            ->addSelect('concat(coalesce(empprc.apellido, \'\'), \', \', coalesce(empprc.nombre, \'\')) as prc_solicitante')
                            ->addSelect('concat(coalesce(emplct.apellido, \'\'), \', \', coalesce(emplct.nombre, \'\')) as lct_radiologo, emplct.id as lct_id_radiologo')
                            ->addSelect('case when (lctVal.id is not null) then concat(coalesce(lctVal.apellido, \'\'), \', \', coalesce(lctVal.nombre, \'\')) else \'\' end as lct_radiologoVal, lctVal.id as lct_id_radiologoVal')
                            ->addSelect('case when (radVal.id is not null) then concat(coalesce(radVal.apellido, \'\'), \', \', coalesce(radVal.nombre, \'\')) else \'\' end as diag_radiologoVal, radVal.id as diag_id_radiologoVal')
                            ->addSelect('stdref.nombre as prc_referido, stdref.id as prc_id_referido, stdiag.nombre as prc_diagnosticante, stdiag.id as prc_id_diagnosticante, stdlct.nombre as lct_diagnosticante, stdlct.id as lct_id_diagnosticante, stdnotdiag.nombre as notdiag_stdEmisor, stdnotdiag.id as notdiag_id_stdEmisor')
                            ->addSelect('m.nombrearea as prc_modalidad, m.id as prc_id_modalidad, prAtn.nombre as prc_prioridadAtencion, prAtn.codigo as prc_codigoPrioridad, frCt.nombre as prc_formaContacto, ctPct.parentesco as prc_contactoPaciente')
                            ->addSelect('usrRg.username as notdiag_usernameUserReg, usrRg.id as notdiag_id_userReg')
                            ->addSelect('concat(coalesce(usrRgEmp.apellido, \'\'), \', \', coalesce(usrRgEmp.nombre, \'\')) as notdiag_nombreUserReg')
                            ->addSelect('case when (tcnlprz.id is not null) then concat(coalesce(tcnlprz.apellido, \'\'), \', \', coalesce(tcnlprz.nombre, \'\')) else \'\' end as prz_tecnologo')
                            ->from('MinsalSimagdBundle:ImgNotaDiagnostico', 'notdiag')
                            ->innerJoin('notdiag.idDiagnostico', 'diag')
                            ->innerJoin('notdiag.idTipoNotaDiagnostico', 'tipoN')
                            ->innerJoin('notdiag.idEmpleado', 'empnotdiag')
                            ->innerJoin('diag.idLectura', 'lct')
                            ->leftJoin('diag.idEstadoDiagnostico', 'statusdiag')
                            ->leftJoin('diag.idRadiologoAprueba', 'radVal')
                            ->leftJoin('lct.idEmpleado', 'emplct')
                            ->leftJoin('lct.idRadiologoDesignadoAprobacion', 'lctVal')
                            ->leftJoin('lct.idEstudio', 'est')
                            ->leftJoin('est.idProcedimientoRealizado', 'prz')
                            ->leftJoin('prz.idSolicitudEstudio', 'prc')
                            ->leftJoin('prz.idTecnologoRealiza', 'tcnlprz')
                            ->innerJoin('diag.idEmpleado', 'diagEmp')
                            ->innerJoin('notdiag.idUserReg', 'usrRg')
                            ->innerJoin('lct.idUserReg', 'lctUsrRg')
                            ->leftJoin('prc.idAtenAreaModEstab', 'aams')
                            ->innerJoin('prc.idEmpleado', 'empprc')
                            ->leftJoin('prc.idExpediente', 'exp')
                            ->leftJoin('prc.idAreaServicioDiagnostico', 'm')
                            ->leftJoin('prc.idEstablecimientoReferido', 'stdref')
                            ->leftJoin('prc.idEstablecimientoDiagnosticante', 'stdiag')
                            ->leftJoin('lct.idEstablecimiento', 'stdlct')
                            ->leftJoin('notdiag.idEstablecimiento', 'stdnotdiag')
                            ->leftJoin('prc.idPrioridadAtencion', 'prAtn')
                            ->leftJoin('prc.idFormaContacto', 'frCt')
                            ->leftJoin('prc.idContactoPaciente', 'ctPct')
                            ->leftJoin('aams.idAtencion', 'atn')
                            ->leftJoin('aams.idAreaModEstab', 'ams')
                            ->leftJoin('aams.idEstablecimiento', 'stdroot')
                            ->leftJoin('ams.idAreaAtencion', 'ar')
                            ->leftJoin('exp.idPaciente', 'pct')
                            ->innerJoin('usrRg.idEmpleado', 'usrRgEmp')
                            ->leftJoin('empnotdiag.idTipoEmpleado', 'tpEmp')
                            ->where('notdiag.idEstablecimiento = :id_est_diag')
                            ->setParameter('id_est_diag', $id_estab)
                            ->orderBy('notdiag.fechaEmision', 'desc')
                            ->addOrderBy('diag.fechaAprobado', 'desc')
                            ->addOrderBy('notdiag.id', 'desc')
                            ->distinct();
        
        $query->leftJoin('prc.idExpedienteFicticio', 'unknExp')->leftJoin('MinsalSiapsBundle:MntExpediente', 'explocal',
                                    \Doctrine\ORM\Query\Expr\Join::WITH,
                                            $query->expr()->andx(
                                                $query->expr()->eq('pct.id', 'explocal.idPaciente'),
                                                $query->expr()->eq('explocal.idEstablecimiento', ':id_est_explocal')
                                            )
                            )
                            ->setParameter('id_est_explocal', $id_estab);
        
        /*
         * --| add filters from BSTABLE_FILTER to query
         */
        $simagd_er_model    = $this->getEntityManager()->getRepository('MinsalSimagdBundle:ImgSolicitudEstudio');
        $apply_filters      = $simagd_er_model->getBsTableFiltersV2($query, $bs_filters);
        if ($apply_filters !== false)
        {
            $query->andWhere($apply_filters);
        }
        /*
         * |-- END filters from BSTABLE_FILTER to query
         */

        return $query->getQuery()->getScalarResult();
    }
}
