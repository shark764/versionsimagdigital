<?php

namespace Minsal\SimagdBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * NotaDiagnosticoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NotaDiagnosticoRepository extends EntityRepository
{
    public function obtenerAccesoNotDiagEstab($id, $idEstab)
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('notdiag.id AS notdiagId')
                            ->from('MinsalSimagdBundle:RyxDiagnosticoSegundaOpinionMedica', 'notdiag')
                            ->where('notdiag.id = :id_notdiag')
                            ->setParameter('id_notdiag', $id)
                            ->andWhere('notdiag.idEstablecimiento = :id_est')
                            ->setParameter('id_est', $idEstab);

        $query->distinct();
        $query->setMaxResults(1);
        
        return $query->getQuery()->getOneOrNullResult() ? true : false;
    }
    
    public function obtenerAccesoNotDiag($id, $idUser)
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('notdiag.id AS notdiagId')
                            ->from('MinsalSimagdBundle:RyxDiagnosticoSegundaOpinionMedica', 'notdiag')
                            ->where('notdiag.id = :id_notdiag')
                            ->setParameter('id_notdiag', $id)
                            ->andWhere('notdiag.idUserReg = :id_user_notdiag_reg')
                            ->setParameter('id_user_notdiag_reg', $idUser);

        $query->distinct();
        $query->setMaxResults(1);
        
        return $query->getQuery()->getOneOrNullResult() ? true : false;
    }
    
    public function obtenerNotasDiagnostico($id_estab, $bs_filters = array())
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('notdiag', 'diag')
                            ->from('MinsalSimagdBundle:RyxDiagnosticoSegundaOpinionMedica', 'notdiag')
                            ->innerJoin('notdiag.idDiagnostico', 'diag')
                            ->where('notdiag.idEstablecimiento = :id_est_diag')
                            ->setParameter('id_est_diag', $id_estab)
                            ->orderBy('notdiag.fechaEmision', 'DESC')
                            ->addOrderBy('diag.fechaAprobado', 'DESC')
                            ->addOrderBy('notdiag.id', 'DESC')
                            ->distinct();
        
        return $query->getQuery()->getResult();
    }

    public function data($id_estab, $bs_filters = array())
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder('notdiag')
                            ->select('notdiag')
                            ->addSelect('diag')
                            ->addSelect('lct')
                            ->addSelect('explocal')->addSelect('unknExp')
                            ->addSelect('prAtn')

                            ->addSelect('notdiag.id AS id, stdroot.nombre AS origen, CONCAT(pct.primerApellido, \' \', COALESCE(pct.segundoApellido, \'\'), \', \', pct.primerNombre, \' \', COALESCE(pct.segundoNombre, \'\')) AS paciente, explocal.numero AS numero_expediente, CASE WHEN (empprc.id IS NOT NULL) THEN CONCAT(COALESCE(empprc.apellido, \'\'), \', \', COALESCE(empprc.nombre, \'\')) ELSE \'\' END AS medico, ar.nombre AS area_atencion, atn.nombre AS atencion, m.nombrearea AS modalidad, prAtn.nombre AS triage, CONCAT(COALESCE(emplct.apellido, \'\'), \', \', COALESCE(emplct.nombre, \'\')) AS radiologo, statusdiag.nombreEstado AS estado, diag.conclusion AS conclusion, CONCAT(COALESCE(empdiag.apellido, \'\'), \', \', COALESCE(empdiag.nombre, \'\')) AS transcriptor, diag.fechaTranscrito AS fecha_transcrito, diag.fechaAprobado AS fecha_aprobado, diag.fechaRegistro AS fecha_diagnostico, CONCAT(COALESCE(empnotdiag.apellido, \'\'), \', \', COALESCE(empnotdiag.nombre, \'\')) AS medico_opinion, notdiag.fechaEmision AS fecha_registro, notdiag.contenido as opinion')

                            ->addSelect('statusdiag.id AS diag_id_estado, statusdiag.nombreEstado AS diag_estado, statusdiag.codigo AS diag_codEstado, tipoN.nombreTipo AS notdiag_tipoNota, tipoN.codigo AS notdiag_codTipo, tipoN.id AS notdiag_id_tipoNota')
                            ->addSelect('prc.fechaCreacion AS prc_fechaCreacion, est.id AS est_id, est.fechaEstudio AS est_fechaEstudio, est.url AS est_url, prz.fechaAlmacenado AS prz_fechaAlmacenado')
                            ->addSelect('CONCAT(pct.primerApellido, \' \', COALESCE(pct.segundoApellido, \'\'), \', \', pct.primerNombre, \' \', COALESCE(pct.segundoNombre, \'\')) AS prc_paciente')
                            ->addSelect('stdroot.nombre AS prc_origen, stdroot.id AS prc_id_origen, ar.nombre AS prc_areaAtencion, ar.id AS prc_id_areaAtencion, atn.nombre AS prc_atencion, atn.id AS prc_id_atencion')
                            ->addSelect('CONCAT(COALESCE(empnotdiag.apellido, \'\'), \', \', COALESCE(empnotdiag.nombre, \'\')) AS notdiag_emisorNota, empnotdiag.id AS notdiag_id_emisorNota, tpEmp.tipo AS notdiag_tipoEmpleado')
                            ->addSelect('CONCAT(COALESCE(empdiag.apellido, \'\'), \', \', COALESCE(empdiag.nombre, \'\')) AS diag_transcriptor, empdiag.id AS diag_id_transcriptor')
                            ->addSelect('CONCAT(COALESCE(empprc.apellido, \'\'), \', \', COALESCE(empprc.nombre, \'\')) AS prc_solicitante')
                            ->addSelect('CONCAT(COALESCE(emplct.apellido, \'\'), \', \', COALESCE(emplct.nombre, \'\')) AS lct_radiologo, emplct.id AS lct_id_radiologo')
                            ->addSelect('CASE WHEN (lctVal.id IS NOT NULL) THEN CONCAT(COALESCE(lctVal.apellido, \'\'), \', \', COALESCE(lctVal.nombre, \'\')) ELSE \'\' END AS lct_radiologoVal, lctVal.id AS lct_id_radiologoVal')
                            ->addSelect('CASE WHEN (radVal.id IS NOT NULL) THEN CONCAT(COALESCE(radVal.apellido, \'\'), \', \', COALESCE(radVal.nombre, \'\')) ELSE \'\' END AS diag_radiologoVal, radVal.id AS diag_id_radiologoVal')
                            ->addSelect('stdref.nombre AS prc_referido, stdref.id AS prc_id_referido, stdiag.nombre AS prc_diagnosticante, stdiag.id AS prc_id_diagnosticante, stdlct.nombre AS lct_diagnosticante, stdlct.id AS lct_id_diagnosticante, stdnotdiag.nombre AS notdiag_stdEmisor, stdnotdiag.id AS notdiag_id_stdEmisor')
                            ->addSelect('m.nombrearea AS prc_modalidad, m.id AS prc_id_modalidad, prAtn.nombre AS prc_prioridadAtencion, prAtn.codigo AS prc_codigoPrioridad, frCt.nombre AS prc_formaContacto, ctPct.parentesco AS prc_contactoPaciente')
                            ->addSelect('usrRg.username AS notdiag_usernameUserReg, usrRg.id AS notdiag_id_userReg')
                            ->addSelect('CONCAT(COALESCE(usrRgEmp.apellido, \'\'), \', \', COALESCE(usrRgEmp.nombre, \'\')) AS notdiag_nombreUserReg')
                            ->addSelect('CASE WHEN (tcnlprz.id IS NOT NULL) THEN CONCAT(COALESCE(tcnlprz.apellido, \'\'), \', \', COALESCE(tcnlprz.nombre, \'\')) ELSE \'\' END AS prz_tecnologo')
                            ->from('MinsalSimagdBundle:RyxDiagnosticoSegundaOpinionMedica', 'notdiag')
                            ->innerJoin('notdiag.idDiagnostico', 'diag')
                            ->innerJoin('notdiag.idTipoNotaDiagnostico', 'tipoN')
                            ->innerJoin('notdiag.idEmpleado', 'empnotdiag')
                            ->innerJoin('diag.idLectura', 'lct')
                            ->leftJoin('diag.idEstadoDiagnostico', 'statusdiag')
                            ->leftJoin('diag.idRadiologoAprueba', 'radVal')
                            ->leftJoin('lct.idEmpleado', 'emplct')
                            ->leftJoin('lct.idRadiologoDesignadoAprobacion', 'lctVal')
                            ->leftJoin('lct.idEstudio', 'est')
                            ->leftJoin('est.idProcedimientoRealizado', 'prz')
                            ->leftJoin('prz.idSolicitudEstudio', 'prc')
                            ->leftJoin('prz.idTecnologoRealiza', 'tcnlprz')
                            ->innerJoin('diag.idEmpleado', 'empdiag')
                            ->innerJoin('notdiag.idUserReg', 'usrRg')
                            ->innerJoin('lct.idUserReg', 'lctUsrRg')
                            ->leftJoin('prc.idAtenAreaModEstab', 'aams')
                            ->innerJoin('prc.idEmpleado', 'empprc')
                            ->leftJoin('prc.idExpediente', 'exp')
                            ->leftJoin('prc.idAreaServicioDiagnostico', 'm')
                            ->leftJoin('prc.idEstablecimientoReferido', 'stdref')
                            ->leftJoin('prc.idEstablecimientoDiagnosticante', 'stdiag')
                            ->leftJoin('lct.idEstablecimiento', 'stdlct')
                            ->leftJoin('notdiag.idEstablecimiento', 'stdnotdiag')
                            ->leftJoin('prc.idPrioridadAtencion', 'prAtn')
                            ->leftJoin('prc.idFormaContacto', 'frCt')
                            ->leftJoin('prc.idContactoPaciente', 'ctPct')
                            ->leftJoin('aams.idAtencion', 'atn')
                            ->leftJoin('aams.idAreaModEstab', 'ams')
                            ->leftJoin('aams.idEstablecimiento', 'stdroot')
                            ->leftJoin('ams.idAreaAtencion', 'ar')
                            ->leftJoin('exp.idPaciente', 'pct')
                            ->innerJoin('usrRg.idEmpleado', 'usrRgEmp')
                            ->leftJoin('empnotdiag.idTipoEmpleado', 'tpEmp')
                            ->where('notdiag.idEstablecimiento = :id_est_diag')
                            ->setParameter('id_est_diag', $id_estab)
                            ->orderBy('notdiag.fechaEmision', 'DESC')
                            ->addOrderBy('diag.fechaAprobado', 'DESC')
                            ->addOrderBy('notdiag.id', 'DESC')
                            ->distinct();
        
        $query->leftJoin('prc.idExpedienteFicticio', 'unknExp')->leftJoin('MinsalSiapsBundle:MntExpediente', 'explocal',
                                    \Doctrine\ORM\Query\Expr\Join::WITH,
                                            $query->expr()->andx(
                                                $query->expr()->eq('pct.id', 'explocal.idPaciente'),
                                                $query->expr()->eq('explocal.idEstablecimiento', ':id_est_explocal')
                                            )
                            )
                            ->setParameter('id_est_explocal', $id_estab);
        
        /*
         * --| add filters from BSTABLE_FILTER to query
         */
        $simagd_er_model    = $this->getEntityManager()->getRepository('MinsalSimagdBundle:RyxSolicitudEstudio');
        $apply_filters      = $simagd_er_model->getBsTableFiltersV2($query, $bs_filters);
        if ($apply_filters !== false)
        {
            $query->andWhere($apply_filters);
        }
        /*
         * |-- END filters from BSTABLE_FILTER to query
         */

        return $query->getQuery()->getScalarResult();
    }

}