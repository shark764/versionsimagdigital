<?php

namespace Minsal\SimagdBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * CtlAreaServicioDiagnosticoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CtlAreaServicioDiagnosticoRepository extends EntityRepository
{
    /**
     * Método perteneciente a módulo <simagd>
     * @param type $idEstablecimiento
     * @return type
     */
    public function obtenerModalidadesSolicitadasPreinscripcion($idEstablecimiento, $bs_filters = array())
    {
        /** SubQuery */
        $subQuery = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('prc')
                            ->from('MinsalSimagdBundle:RyxSolicitudEstudio', 'prc')
                            ->innerJoin('prc.idAtenAreaModEstab', 'aams')
                            ->where('m.id = prc.idAreaServicioDiagnostico');

        $subQuery->andWhere($subQuery->expr()->orx(
                            $subQuery->expr()->eq('prc.idEstablecimientoReferido', ':id_est_ref'),
                            $subQuery->expr()->eq('prc.idEstablecimientoDiagnosticante', ':id_est_diag'),
                            $subQuery->expr()->eq('aams.idEstablecimiento', ':id_est')
                        ));

        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('m')
                            ->from('MinsalSimagdBundle:CtlAreaServicioDiagnostico', 'm');

        $query->where($query->expr()->exists($subQuery->getDql()))
                            ->setParameter('id_est_ref', $idEstablecimiento)
                            ->setParameter('id_est_diag', $idEstablecimiento)
                            ->setParameter('id_est', $idEstablecimiento);

        $query->orderBy('m.nombrearea');

        $query->distinct();

        return $query;
    }

    /**
     * Método perteneciente a módulo <simagd>
     * @param type $idAtencion
     * @return type
     */
    public function obtenerModalidadesParaPreinscribir($idAtencion = '97')
    {
        /** SubQuery */
        $subQuery = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('mr')
                            ->from('MinsalSimagdBundle:MntAreaExamenEstablecimiento', 'mr')
                            ->where('m.id = mr.idAreaServicioDiagnostico')
                            ->andWhere('mr.imgHabilitado = TRUE');

        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('m')
                            ->from('MinsalSimagdBundle:CtlAreaServicioDiagnostico', 'm')
                            ->andWhere('m.idAtencion = :id_atn')
                            ->setParameter('id_atn', $idAtencion);

        $query->andWhere($query->expr()->exists($subQuery->getDql()));

        $query->orderBy('m.nombrearea');

        $query->distinct();

        return $query;
    }

    /**
     * Método perteneciente a módulo <simagd>
     * @param type $idAtencion
     * @return type
     */
    public function obtenerModalidadesImagenologia ($idAtencion )
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('m')
                            ->from('MinsalSimagdBundle:CtlAreaServicioDiagnostico', 'm')
                            ->where('m.idAtencion = :id_atn')
                            ->setParameter('id_atn', $idAtencion)
                            ->orderBy('m.imgCodigo')
                            ->addOrderBy('m.nombrearea')
                            ->distinct();

        return $query;
    }

    /**
     * Método perteneciente a módulo <simagd>
     * @param type $idEstablecimiento
     * @return type
     */
    public function obtenerTodasModalidadesSolicitadasPreinscripcion()
    {
        /** SubQuery */
        $subQuery = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('prc')
                            ->from('MinsalSimagdBundle:RyxSolicitudEstudio', 'prc')
                            ->where('m.id = prc.idAreaServicioDiagnostico');

        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('m')
                            ->from('MinsalSimagdBundle:CtlAreaServicioDiagnostico', 'm');

        $query->where($query->expr()->exists($subQuery->getDql()));

        $query->orderBy('m.nombrearea');

        $query->distinct();

        return $query;
    }

    /**
     * Método perteneciente a módulo <simagd>
     * @param type $idEstablecimiento
     * @return type
     */
    public function obtenerModalidadesSolicitadasEstab($idEstablecimiento, $bs_filters = array())
    {
        /** SubQuery */
        $subQuery = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('prz')
                            ->from('MinsalSimagdBundle:RyxProcedimientoRadiologicoRealizado', 'prz')
                            ->innerJoin('prz.idSolicitudEstudio', 'prc')
                            ->where('m.id = prc.idAreaServicioDiagnostico')
                            ->andWhere('prc.idEstablecimientoReferido = :id_est_ref');

        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('m')
                            ->from('MinsalSimagdBundle:CtlAreaServicioDiagnostico', 'm');

        $query->where($query->expr()->exists($subQuery->getDql()))
                            ->setParameter('id_est_ref', $idEstablecimiento);

        $query->orderBy('m.nombrearea');

        $query->distinct();

        return $query->getQuery()->getResult();
    }

    /**
     * Método perteneciente a módulo <simagd>
     * @param type $idEstablecimiento
     * @return type
     */
    public function obtenerModalidadesDiagnosticadasEstab($idEstablecimiento, $bs_filters = array())
    {
        /** SubQuery */
        $subQuery = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('lct')
                            ->from('MinsalSimagdBundle:RyxLecturaRadiologica', 'lct')
                            ->innerJoin('lct.idEstudio', 'est')
                            ->innerJoin('est.idProcedimientoRealizado', 'prz')
                            ->innerJoin('prz.idSolicitudEstudio', 'prc')
                            ->where('m.id = prc.idAreaServicioDiagnostico')
                            ->andWhere('lct.idEstablecimiento = :id_est');

        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('m')
                            ->from('MinsalSimagdBundle:CtlAreaServicioDiagnostico', 'm');

        $query->where($query->expr()->exists($subQuery->getDql()))
                            ->setParameter('id_est', $idEstablecimiento);

        $query->orderBy('m.nombrearea');

        $query->distinct();

        return $query->getQuery()->getResult();
    }

    /**
     * Método perteneciente a módulo <simagd>
     * @param type $idEstablecimiento
     * @return type
     */
    public function obtenerModalidadesPreinscritasEstab($idEstablecimiento, $bs_filters = array())
    {
        /** SubQuery */
        $subQuery = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('prc')
                            ->from('MinsalSimagdBundle:RyxSolicitudEstudio', 'prc')
                            ->innerJoin('prc.idAtenAreaModEstab', 'aams')
                            ->where('m.id = prc.idAreaServicioDiagnostico')
                            ->andWhere('aams.idEstablecimiento = :id_est');

        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('m')
                            ->from('MinsalSimagdBundle:CtlAreaServicioDiagnostico', 'm');

        $query->where($query->expr()->exists($subQuery->getDql()))
                            ->setParameter('id_est', $idEstablecimiento);

        $query->orderBy('m.nombrearea');

        $query->distinct();

        return $query->getQuery()->getResult();
    }

    /**
     * Método perteneciente a módulo <simagd>
     * @param type $idAtencion
     * @return type
     */
    public function obtenerModalidadesRealizablesLocalV2($idEstablecimiento, $idAtencion = '97', $return = 'result')
    {
        /** SubQuery */
        $subQuery = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('mr')
                            ->from('MinsalSimagdBundle:MntAreaExamenEstablecimiento', 'mr')
                            ->where('m.id = mr.idAreaServicioDiagnostico')
                            ->andWhere('mr.imgHabilitado = TRUE')
                            ->andWhere('mr.idEstablecimiento = :id_est');

        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('m')
                            ->from('MinsalSimagdBundle:CtlAreaServicioDiagnostico', 'm')
                            ->andWhere('m.idAtencion = :id_atn')
                            ->setParameter('id_atn', $idAtencion);

        $query->andWhere($query->expr()->exists($subQuery->getDql()))
                            ->setParameter('id_est', $idEstablecimiento);

        $query->orderBy('m.nombrearea');

        $query->distinct();

        return $return == 'query' ? $query : $query->getQuery()->getResult();
    }

    /**
     * Método perteneciente a módulo <simagd>
     * @param type $idEstablecimiento
     * @return type
     */
    public function getSourceDataModalidadV1($idEstablecimiento)
    {
        /*
         * SubQuery
         * prc --| solicitud de estudio
         */
        $subQuery = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('prc')
                            ->from('MinsalSimagdBundle:RyxSolicitudEstudio', 'prc')
                            ->innerJoin('prc.idAtenAreaModEstab', 'aams')
                            ->where('m.id = prc.idAreaServicioDiagnostico');

        $subQuery->andWhere($subQuery->expr()->orx(
                            $subQuery->expr()->eq('prc.idEstablecimientoReferido', ':id_est_ref'),
                            $subQuery->expr()->eq('prc.idEstablecimientoDiagnosticante', ':id_est_diag'),
                            $subQuery->expr()->eq('aams.idEstablecimiento', ':id_est')
                        ));

        /*
         * SubQuery 2
         * solcmpl --| solicitud de adicional
         */
        $subQuery2 = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('solcmpl')
                            ->from('MinsalSimagdBundle:RyxSolicitudEstudioComplementario', 'solcmpl')
                            ->where('m.id = solcmpl.idAreaServicioDiagnostico')
                            ->andWhere('solcmpl.idEstablecimientoSolicitado = :id_est_sol');

        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('m.id as id, m.nombrearea as text')
                            ->from('MinsalSimagdBundle:CtlAreaServicioDiagnostico', 'm');

        $query->where($query->expr()->orx(
				$query->expr()->exists($subQuery->getDql()),
				$query->expr()->exists($subQuery2->getDql())
			    ))
                            ->setParameter('id_est_ref', $idEstablecimiento)
                            ->setParameter('id_est_diag', $idEstablecimiento)
                            ->setParameter('id_est', $idEstablecimiento)
                            ->setParameter('id_est_sol', $idEstablecimiento);

        $query->orderBy('m.nombrearea')
                            ->addOrderBy('m.id')
                            ->distinct();

        return $query->getQuery()->getScalarResult();
    }

    /**
     * Método perteneciente a módulo <simagd>
     * @param type $idEstablecimiento
     * @return type
     */
    public function getSourceDataModalidad($idEstablecimiento)
    {
        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('m.id as id, m.nombrearea as text')
                            ->from('MinsalSimagdBundle:CtlAreaServicioDiagnostico', 'm')
                            ->orderBy('m.nombrearea')
                            ->addOrderBy('m.id')
                            ->distinct();

        return $query->getQuery()->getScalarResult();
    }

    public function data($id_atn, $bs_filters = array())
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder('m')
                            ->select('m')

                            ->addSelect('m.id AS id, m.nombrearea AS nombre, m.idarea AS codigo, m.fechahorareg AS fecha_registro, m.fechahoramod AS fecha_edicion')

                            // ->addSelect('IDENTITY(exm.idAtencion) AS exm_id_atencion')
                            // ->addSelect('usrRg.username AS expl_usernameUserReg, usrRg.id AS expl_id_userReg, usrMd.username AS expl_usernameUserMod, usrMd.id AS expl_id_userMod')
                            // ->addSelect('CONCAT(COALESCE(usrRgEmp.apellido, \'\'), \', \', COALESCE(usrRgEmp.nombre, \'\')) AS expl_nombreUserReg')
                            // ->addSelect('CASE WHEN (usrMd.username IS NOT NULL) THEN CONCAT(COALESCE(usrMdEmp.apellido, \'\'), \', \', COALESCE(usrMdEmp.nombre, \'\')) ELSE \'\' END AS expl_nombreUserMod')
                            // ->addSelect('CASE WHEN (sex.id IS NOT NULL) THEN sex.nombre ELSE \'Todos los sexos\' END AS exm_sexo')
                            ->from('MinsalSimagdBundle:CtlAreaServicioDiagnostico', 'm')
                            ->where('m.idAtencion = :id_atn')
                            ->setParameter('id_atn', $id_atn)
                            ->orderBy('m.idarea', 'DESC')
                            ->distinct();

        /*
         * --| add filters from BSTABLE_FILTER to query
         */
        $simagd_er_model    = $this->getEntityManager()->getRepository('MinsalSimagdBundle:RyxSolicitudEstudio');
        $apply_filters      = $simagd_er_model->getBsTableFiltersV2($query, $bs_filters);
        if ($apply_filters !== false)
        {
            $query->andWhere($apply_filters);
        }
        /*
         * |-- END filters from BSTABLE_FILTER to query
         */

        return $query->getQuery()->getScalarResult();
    }

}