<?php

namespace Minsal\SimagdBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * RyxEstudioPendienteLecturaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RyxEstudioPendienteLecturaRepository extends EntityRepository
{
    /*
     * **************************************************************************
     * Asignar radiólogo a elementos de lista
     * **************************************************************************
     */
    public function addToWorkList($id_estabLocal, $id_radX, $id_empUsserAssign, $rows = array())
    {
        /*
         * QueryBuilder
         */
        $qb = $this->getEntityManager()->createQueryBuilder();
        /*
         * Query
         */
        $q  = $qb->update('MinsalSimagdBundle:RyxEstudioPendienteLectura', 'pndL')
                    ->set('pndL.idRadiologoAsignado', $qb->expr()->literal($id_radX))
                    ->set('pndL.idAsignaRadiologo', $qb->expr()->literal($id_empUsserAssign))
                    ->where('pndL.idEstablecimiento = :id_est_pndL')
                    ->setParameter('id_est_pndL', $id_estabLocal)
                    ->andWhere('pndL.id IN (:pndL_rows_affected)')
                    ->setParameter('pndL_rows_affected', $rows)
                ->getQuery();
        /*
         * execute query
         */
        $p = $q->execute();
    }

    public function getWorkList($id_estab, $bs_filters = array())
    {
        /** SubQuery */
        $subQuery = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('lct')
                            ->from('MinsalSimagdBundle:RyxLecturaRadiologica', 'lct')
                            // ->where('lct.idEstadoLectura NOT IN ( 4, 5, 6 )')
                            ->andWhere('lct.idEstudio = pndL.idEstudio');

        /** SubQuery2 */
        $subQuery2 = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('lctEst')
                            ->from('MinsalSimagdBundle:RyxLecturaEstudio', 'lctEst')
                            // ->where('lctEst.idEstadoLectura NOT IN ( 4, 5, 6 )')
                            ->andWhere('lctEst.idEstudio = pndL.idEstudio');

        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder('pndL')
                            ->select('pndL')
                            ->addSelect('est')
                            ->addSelect('prz')
                            ->addSelect('prc')
                            ->addSelect('solcmpl')
                            ->addSelect('estPdr')
                            ->addSelect('lctPdr')
                            ->addSelect('explocal')->addSelect('unknExp')
                            ->addSelect('prAtn')

                            ->addSelect('pndL.id AS id, stdroot.nombre AS origen, CONCAT(pct.primerApellido, \' \', COALESCE(pct.segundoApellido, \'\'), \', \', pct.primerNombre, \' \', COALESCE(pct.segundoNombre, \'\')) AS paciente, explocal.numero AS numero_expediente, CASE WHEN (empprc.id IS NOT NULL) THEN CONCAT(COALESCE(empprc.apellido, \'\'), \', \', COALESCE(empprc.nombre, \'\')) ELSE \'\' END AS medico, ar.nombre AS area_atencion, atn.nombre AS atencion, m.nombrearea AS modalidad, prAtn.nombre AS triage, pndL.fechaIngresoLista AS fecha_ingreso, CASE WHEN (tcnlprz.id IS NOT NULL) THEN CONCAT(COALESCE(tcnlprz.apellido, \'\'), \', \', COALESCE(tcnlprz.nombre, \'\')) ELSE \'\' END AS tecnologo')

                            ->addSelect('statusprz.id AS prz_id_estado, statusprz.nombreEstado AS prz_estado, statusprz.codigo AS prz_codEstado')
                            ->addSelect('CONCAT(pct.primerApellido, \' \', COALESCE(pct.segundoApellido, \'\'), \', \', pct.primerNombre, \' \', COALESCE(pct.segundoNombre, \'\')) AS prc_paciente')
                            ->addSelect('stdroot.nombre AS prc_origen, stdroot.id AS prc_id_origen, ar.nombre AS prc_areaAtencion, ar.id AS prc_id_areaAtencion, atn.nombre AS prc_atencion, atn.id AS prc_id_atencion')
                            ->addSelect('CASE WHEN (empprc.id IS NOT NULL) THEN CONCAT(COALESCE(empprc.apellido, \'\'), \', \', COALESCE(empprc.nombre, \'\')) ELSE \'\' END AS prc_solicitante')
                            ->addSelect('CASE WHEN (empcmpl.id IS NOT NULL) THEN CONCAT(COALESCE(empcmpl.apellido, \'\'), \', \', COALESCE(empcmpl.nombre, \'\')) ELSE \'\' END AS solcmpl_solicitante')
                            ->addSelect('CASE WHEN (empradxpndL.id IS NOT NULL) THEN CONCAT(COALESCE(empradxpndL.apellido, \'\'), \', \', COALESCE(empradxpndL.nombre, \'\')) ELSE \'\' END AS pndL_radiologoAnexa, empradxpndL.id AS pndL_id_radiologoAnexa, tpEmp.tipo AS pndL_tipoEmpleado')
                            ->addSelect('CONCAT(COALESCE(tcnlprz.apellido, \'\'), \', \', COALESCE(tcnlprz.nombre, \'\')) AS prz_tecnologo, tcnlprz.id AS prz_id_tecnologo')
                            ->addSelect('stdPacs.nombre AS est_establecimiento, stdPacs.id AS est_id_establecimiento, stdPndL.nombre AS pndL_establecimiento, stdPndL.id AS pndL_id_establecimiento')
                            ->addSelect('m.nombrearea AS prc_modalidad, m.id AS prc_id_modalidad, prAtn.nombre AS prc_prioridadAtencion, prAtn.codigo AS prc_codigoPrioridad, frCt.nombre AS prc_formaContacto, ctPct.parentesco AS prc_contactoPaciente')
                            ->addSelect('mcmpl.nombrearea AS solcmpl_modalidad, prAtnCmpl.nombre AS solcmpl_prioridadAtencion, prAtnCmpl.codigo AS solcmpl_codigoPrioridad')
                            ->from('MinsalSimagdBundle:RyxEstudioPendienteLectura', 'pndL')
                            ->leftJoin('pndL.idRadiologoAnexa', 'empradxpndL')
                            ->innerJoin('pndL.idEstudio', 'est')
                            ->innerJoin('est.idProcedimientoRealizado', 'prz')
                            ->leftJoin('prz.idSolicitudEstudio', 'prc')
                            ->innerJoin('prz.idTecnologoRealiza', 'tcnlprz')
                            ->innerJoin('prz.idEstadoProcedimientoRealizado', 'statusprz')
                            ->leftJoin('prc.idAtenAreaModEstab', 'aams')
                            ->leftJoin('prc.idEmpleado', 'empprc')
                            ->innerJoin('est.idExpediente', 'exp')
                            ->leftJoin('prc.idAreaServicioDiagnostico', 'm')
                            ->innerJoin('est.idEstablecimiento', 'stdPacs')
                            ->innerJoin('pndL.idEstablecimiento', 'stdPndL')
                            ->leftJoin('prc.idPrioridadAtencion', 'prAtn')
                            ->leftJoin('prc.idFormaContacto', 'frCt')
                            ->leftJoin('prc.idContactoPaciente', 'ctPct')
                            ->leftJoin('aams.idAtencion', 'atn')
                            ->leftJoin('aams.idAreaModEstab', 'ams')
                            ->leftJoin('aams.idEstablecimiento', 'stdroot')
                            ->leftJoin('ams.idAreaAtencion', 'ar')
                            ->innerJoin('exp.idPaciente', 'pct')
                            ->leftJoin('empradxpndL.idTipoEmpleado', 'tpEmp')
                            ->leftJoin('prz.idSolicitudEstudioComplementario', 'solcmpl')
                            ->leftJoin('solcmpl.idAreaServicioDiagnostico', 'mcmpl')
                            ->leftJoin('solcmpl.idRadiologoSolicita', 'empcmpl')
                            ->leftJoin('solcmpl.idPrioridadAtencion', 'prAtnCmpl')
                            ->leftJoin('solcmpl.idEstudioPadre', 'estPdr')
                            ->leftJoin('MinsalSimagdBundle:RyxLecturaRadiologica', 'lctPdr',
                                    \Doctrine\ORM\Query\Expr\Join::WITH,
                                    'estPdr.id = lctPdr.idEstudio')
                            ->where('pndL.idEstablecimiento = :id_est_diag')
                            ->setParameter('id_est_diag', $id_estab)
                            ->orderBy('pndL.fechaIngresoLista', 'ASC')
                            ->addOrderBy('pndL.id', 'DESC');

        $query->leftJoin('prc.idExpedienteFicticio', 'unknExp')->leftJoin('MinsalSiapsBundle:MntExpediente', 'explocal',
                                    \Doctrine\ORM\Query\Expr\Join::WITH,
                                            $query->expr()->andx(
                                                $query->expr()->eq('pct.id', 'explocal.idPaciente'),
                                                $query->expr()->eq('explocal.idEstablecimiento', ':id_est_explocal')
                                            )
                            )
                            ->setParameter('id_est_explocal', $id_estab);

        /** Añadir establecimiento en parameter, en caso que pueda diagnosticarse en varios establecimientos */
        $query->andWhere($query->expr()->andx(
                            $query->expr()->not($query->expr()->exists($subQuery->getDql())),
                            $query->expr()->not($query->expr()->exists($subQuery2->getDql()))
                        ))
                ->distinct();

        /*
         * --| add filters from BSTABLE_FILTER to query
         */
        $simagd_er_model    = $this->getEntityManager()->getRepository('MinsalSimagdBundle:RyxSolicitudEstudio');
        $apply_filters      = $simagd_er_model->getBsTableFiltersV2($query, $bs_filters);
        if ($apply_filters !== false)
        {
            $query->andWhere($apply_filters);
        }
        /*
         * |-- END filters from BSTABLE_FILTER to query
         */

        return $query->getQuery()->getScalarResult();
    }

    public function assignedWorkList($id_estab, $sessionUser, $bs_filters = array())
    {
        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder('pndL')
                            ->select('pndL')
                            ->addSelect('lct')
                            ->addSelect('ptrAsc')
                            ->addSelect('est')
                            ->addSelect('prz')
                            ->addSelect('prc')
                            ->addSelect('solcmpl')
                            ->addSelect('estPdr')
                            ->addSelect('explocal')->addSelect('unknExp')
                            ->addSelect('prAtn')
                            ->addSelect('statusprz.id AS prz_id_estado, statusprz.nombreEstado AS prz_estado, statusprz.codigo AS prz_codEstado')
                            ->addSelect('statuslct.id AS lct_id_estado, statuslct.nombreEstado AS lct_estado, statuslct.codigo AS lct_codEstado, tipoR.id AS lct_id_tipoResultado, tipoR.nombreTipo AS lct_tipoResultado, tipoR.indeterminado AS lct_indeterminado')
                            ->addSelect('CONCAT(COALESCE(emplct.apellido, \'\'), \', \', COALESCE(emplct.nombre, \'\')) AS lct_radiologo, emplct.id AS lct_id_radiologo, tpEmpLct.tipo AS lct_tipoEmpleado')
                            ->addSelect('CONCAT(pct.primerApellido, \' \', COALESCE(pct.segundoApellido, \'\'), \', \', pct.primerNombre, \' \', COALESCE(pct.segundoNombre, \'\')) AS prc_paciente')
                            ->addSelect('stdroot.nombre AS prc_origen, stdroot.id AS prc_id_origen, ar.nombre AS prc_areaAtencion, ar.id AS prc_id_areaAtencion, atn.nombre AS prc_atencion, atn.id AS prc_id_atencion')
                            ->addSelect('CASE WHEN (empprc.id IS NOT NULL) THEN CONCAT(COALESCE(empprc.apellido, \'\'), \', \', COALESCE(empprc.nombre, \'\')) ELSE \'\' END AS prc_solicitante')
                            ->addSelect('CASE WHEN (empcmpl.id IS NOT NULL) THEN CONCAT(COALESCE(empcmpl.apellido, \'\'), \', \', COALESCE(empcmpl.nombre, \'\')) ELSE \'\' END AS solcmpl_solicitante')
                            ->addSelect('CASE WHEN (emp.id IS NOT NULL) THEN CONCAT(COALESCE(emp.apellido, \'\'), \', \', COALESCE(emp.nombre, \'\')) ELSE \'\' END AS pndL_radiologoAnexa, emp.id AS pndL_id_radiologoAnexa, tpEmp.tipo AS pndL_tipoEmpleado')
                            ->addSelect('CONCAT(COALESCE(tcnlprz.apellido, \'\'), \', \', COALESCE(tcnlprz.nombre, \'\')) AS prz_tecnologo, tcnlprz.id AS prz_id_tecnologo')
                            ->addSelect('stdPacs.nombre AS est_establecimiento, stdPacs.id AS est_id_establecimiento, stdPndL.nombre AS pndL_establecimiento, stdPndL.id AS pndL_id_establecimiento')
                            ->addSelect('m.nombrearea AS prc_modalidad, m.id AS prc_id_modalidad, prAtn.nombre AS prc_prioridadAtencion, prAtn.codigo AS prc_codigoPrioridad, frCt.nombre AS prc_formaContacto, ctPct.parentesco AS prc_contactoPaciente')
                            ->addSelect('mcmpl.nombrearea AS solcmpl_modalidad, prAtnCmpl.nombre AS solcmpl_prioridadAtencion, prAtnCmpl.codigo AS solcmpl_codigoPrioridad')
                            ->from('MinsalSimagdBundle:RyxEstudioPendienteLectura', 'pndL')
                            ->innerJoin('MinsalSimagdBundle:RyxLecturaRadiologica', 'lct',
                                    \Doctrine\ORM\Query\Expr\Join::WITH,
                                    'lct.idEstudio = pndL.idEstudio')
                            ->innerJoin('lct.idEstadoLectura', 'statuslct')
                            ->innerJoin('lct.idTipoResultado', 'tipoR')
                            ->innerJoin('lct.idEmpleado', 'emplct')
                            ->leftJoin('lct.idPatronAsociado', 'ptrAsc')
                            ->leftJoin('pndL.idRadiologoAnexa', 'emp')
                            ->innerJoin('pndL.idEstudio', 'est')
                            ->innerJoin('est.idProcedimientoRealizado', 'prz')
                            ->innerJoin('prz.idEstadoProcedimientoRealizado', 'statusprz')
                            ->leftJoin('prz.idSolicitudEstudio', 'prc')
                            ->innerJoin('prz.idTecnologoRealiza', 'tcnlprz')
                            ->leftJoin('prc.idAtenAreaModEstab', 'aams')
                            ->leftJoin('prc.idEmpleado', 'empprc')
                            ->innerJoin('est.idExpediente', 'exp')
                            ->leftJoin('prc.idAreaServicioDiagnostico', 'm')
                            ->innerJoin('est.idEstablecimiento', 'stdPacs')
                            ->innerJoin('pndL.idEstablecimiento', 'stdPndL')
                            ->leftJoin('prc.idPrioridadAtencion', 'prAtn')
                            ->leftJoin('prc.idFormaContacto', 'frCt')
                            ->leftJoin('prc.idContactoPaciente', 'ctPct')
                            ->leftJoin('aams.idAtencion', 'atn')
                            ->leftJoin('aams.idAreaModEstab', 'ams')
                            ->leftJoin('aams.idEstablecimiento', 'stdroot')
                            ->leftJoin('ams.idAreaAtencion', 'ar')
                            ->innerJoin('exp.idPaciente', 'pct')
                            ->leftJoin('emplct.idTipoEmpleado', 'tpEmp')
                            ->leftJoin('emplct.idTipoEmpleado', 'tpEmpLct')
                            ->leftJoin('prz.idSolicitudEstudioComplementario', 'solcmpl')
                            ->leftJoin('solcmpl.idAreaServicioDiagnostico', 'mcmpl')
                            ->leftJoin('solcmpl.idRadiologoSolicita', 'empcmpl')
                            ->leftJoin('solcmpl.idPrioridadAtencion', 'prAtnCmpl')
                            ->leftJoin('solcmpl.idEstudioPadre', 'estPdr')
                            ->where('pndL.idEstablecimiento = :id_est_lct')
                            ->setParameter('id_est_lct', $id_estab)
                            ->andWhere('lct.idUserReg = :id_user')
                            ->setParameter('id_user', $sessionUser)
                            ->andWhere('statuslct.codigo NOT IN (:status_lct_cod)')
                            ->setParameter('status_lct_cod', array('LDO', 'DCT', 'RZD'))
                            ->orderBy('pndL.fechaIngresoLista', 'ASC')
                            ->addOrderBy('pndL.id', 'DESC')
                            ->distinct();

        $query->leftJoin('prc.idExpedienteFicticio', 'unknExp')->leftJoin('MinsalSiapsBundle:MntExpediente', 'explocal',
                                    \Doctrine\ORM\Query\Expr\Join::WITH,
                                            $query->expr()->andx(
                                                $query->expr()->eq('pct.id', 'explocal.idPaciente'),
                                                $query->expr()->eq('explocal.idEstablecimiento', ':id_est_explocal')
                                            )
                            )
                            ->setParameter('id_est_explocal', $id_estab);

        /*
         * --| add filters from BSTABLE_FILTER to query
         */
        $simagd_er_model    = $this->getEntityManager()->getRepository('MinsalSimagdBundle:RyxSolicitudEstudio');
        $apply_filters      = $simagd_er_model->getBsTableFiltersV2($query, $bs_filters);
        if ($apply_filters !== false)
        {
            $query->andWhere($apply_filters);
        }
        /*
         * |-- END filters from BSTABLE_FILTER to query
         */

        return $query->getQuery()->getScalarResult();
    }

}