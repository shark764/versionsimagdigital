<?php

namespace Minsal\SimagdBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * SolicitudDiagnosticoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SolicitudDiagnosticoRepository extends EntityRepository
{
    public function obtenerAccesoSolDiagEstab($id, $idEstab)
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('soldiag.id as soldiagId')
                            ->from('MinsalSimagdBundle:ImgSolicitudDiagnostico', 'soldiag')
                            ->innerJoin('soldiag.idSolicitudEstudio', 'prc')
                            ->innerJoin('prc.idAtenAreaModEstab', 'aams')
                            ->where('soldiag.id = :id_soldiag')
                            ->setParameter('id_soldiag', $id);

        $query->andWhere($query->expr()->orx(
                            $query->expr()->eq('soldiag.idEstablecimientoSolicitado', ':id_est_sol'),
                            $query->expr()->eq('aams.idEstablecimiento', ':id_est')
                        ))
                            ->setParameter('id_est_sol', $idEstab)
                            ->setParameter('id_est', $idEstab);

        $query->distinct();
        $query->setMaxResults(1);
        
        return $query->getQuery()->getOneOrNullResult() ? true : false;
    }
    
    public function obtenerAccesoSolDiag($id, $idUser)
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('soldiag.id as soldiagId')
                            ->from('MinsalSimagdBundle:ImgSolicitudDiagnostico', 'soldiag')
                            ->where('soldiag.id = :id_soldiag')
                            ->setParameter('id_soldiag', $id)
                            ->andWhere('soldiag.idUserReg = :id_user_soldiag_reg')
                            ->setParameter('id_user_soldiag_reg', $idUser);

        $query->distinct();
        $query->setMaxResults(1);
        
        return $query->getQuery()->getOneOrNullResult() ? true : false;
    }
    
    public function obtenerAccesoSolDiagEstabEdit($id, $idEstab)
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('soldiag.id as soldiagId')
                            ->from('MinsalSimagdBundle:ImgSolicitudDiagnostico', 'soldiag')
                            ->innerJoin('soldiag.idSolicitudEstudio', 'prc')
                            ->innerJoin('prc.idAtenAreaModEstab', 'aams')
                            ->where('soldiag.id = :id_soldiag')
                            ->setParameter('id_soldiag', $id)
                            ->andWhere('aams.idEstablecimiento = :id_est')
                            ->setParameter('id_est', $idEstab);

        $query->distinct();
        $query->setMaxResults(1);
        
        return $query->getQuery()->getOneOrNullResult() ? true : false;
    }
    
    public function bloquearSolDiagnostico($idPrc = '-1')
    {
        $prc_er_model    = $this->getEntityManager()->getRepository('MinsalSimagdBundle:ImgSolicitudEstudio');  // --| entity manager for ImgSolicitudEstudio
        
        return ($prc_er_model->estudioPreinscritoFueAlmacenado($idPrc) || $prc_er_model->existeRegistroPorPreinscripcion($idPrc, 'soldiag', 'ImgSolicitudDiagnostico') ||
                        $prc_er_model->existeLecturaPorPreinscripcion($idPrc));
    }
    
    public function obtenerSolicitudesDiagnostico($id_estab, $bs_filters = array())
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('soldiag')
                            ->from('MinsalSimagdBundle:ImgSolicitudDiagnostico', 'soldiag')
                            ->innerJoin('soldiag.idSolicitudEstudio', 'prc')
                            ->innerJoin('prc.idAtenAreaModEstab', 'aams');

        $query->where($query->expr()->orx(
                            $query->expr()->eq('soldiag.idEstablecimientoSolicitado', ':id_est_sol'),
                            $query->expr()->eq('aams.idEstablecimiento', ':id_est')
                        ))
                            ->setParameter('id_est_sol', $id_estab)
                            ->setParameter('id_est', $id_estab);
        
        $query->orderBy('soldiag.fechaCreacion', 'desc')
                            ->addOrderBy('soldiag.id', 'desc');
                
        $query->distinct();
        
        return $query->getQuery()->getResult();
    }

    public function obtenerSolicitudesDiagnosticoV2($id_estab, $bs_filters = array())
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder('soldiag')
                            ->select('soldiag')
                            ->addSelect('explocal')->addSelect('unknExp')
                            ->addSelect('prAtn')
                            ->addSelect('prc.fechaCreacion as prc_fechaCreacion, est.id as est_id, est.fechaEstudio as est_fechaEstudio, est.url as est_url, prz.fechaAlmacenado as prz_fechaAlmacenado, prz.fechaNacimientoIndeterminada as prz_fechaNacimientoIndeterminada')
                            ->addSelect('concat(pct.primerApellido, \' \', coalesce(pct.segundoApellido, \'\'), \', \', pct.primerNombre, \' \', coalesce(pct.segundoNombre, \'\')) as prc_paciente')
                            ->addSelect('stdroot.nombre as prc_origen, stdroot.id as prc_id_origen, ar.nombre as prc_areaAtencion, ar.id as prc_id_areaAtencion, atn.nombre as prc_atencion, atn.id as prc_id_atencion')
                            ->addSelect('concat(coalesce(empsoldiag.apellido, \'\'), \', \', coalesce(empsoldiag.nombre, \'\')) as soldiag_solicitante, empsoldiag.id as soldiag_id_solicitante, tpEmp.tipo as soldiag_tipoEmpleado')
                            ->addSelect('stdref.nombre as prc_referido, stdref.id as prc_id_referido, stdiag.nombre as prc_diagnosticante, stdiag.id as prc_id_diagnosticante, stdsol.nombre as soldiag_solicitado, stdsol.id as soldiag_id_solicitado')
                            ->addSelect('m.nombrearea as prc_modalidad, m.id as prc_id_modalidad, prAtn.nombre as prc_prioridadAtencion, prAtn.codigo as prc_codigoPrioridad, frCt.nombre as prc_formaContacto, ctPct.parentesco as prc_contactoPaciente')
                            ->addSelect('usrRg.username as soldiag_usernameUserReg, usrRg.id as soldiag_id_userReg')
                            ->addSelect('concat(coalesce(usrRgEmp.apellido, \'\'), \', \', coalesce(usrRgEmp.nombre, \'\')) as soldiag_nombreUserReg')
                            ->addSelect('case when (tcnlprz.id is not null) then concat(coalesce(tcnlprz.apellido, \'\'), \', \', coalesce(tcnlprz.nombre, \'\')) else \'\' end as prz_tecnologo')
                            ->from('MinsalSimagdBundle:ImgSolicitudDiagnostico', 'soldiag')
                            ->innerJoin('soldiag.idSolicitudEstudio', 'prc')
                            ->leftJoin('soldiag.idEstudio', 'est')
                            ->leftJoin('est.idProcedimientoRealizado', 'prz')
                            ->leftJoin('prz.idTecnologoRealiza', 'tcnlprz')
                            ->innerJoin('soldiag.idEmpleado', 'empsoldiag')
                            ->innerJoin('prc.idAtenAreaModEstab', 'aams')
                            ->innerJoin('soldiag.idUserReg', 'usrRg')
                            ->leftJoin('prc.idExpediente', 'exp')
                            ->innerJoin('prc.idAreaServicioDiagnostico', 'm')
                            ->innerJoin('prc.idEstablecimientoReferido', 'stdref')
                            ->leftJoin('prc.idEstablecimientoDiagnosticante', 'stdiag')
                            ->leftJoin('soldiag.idEstablecimientoSolicitado', 'stdsol')
                            ->leftJoin('prc.idPrioridadAtencion', 'prAtn')
                            ->leftJoin('prc.idFormaContacto', 'frCt')
                            ->leftJoin('prc.idContactoPaciente', 'ctPct')
                            ->innerJoin('aams.idAtencion', 'atn')
                            ->innerJoin('aams.idAreaModEstab', 'ams')
                            ->innerJoin('aams.idEstablecimiento', 'stdroot')
                            ->innerJoin('ams.idAreaAtencion', 'ar')
                            ->leftJoin('exp.idPaciente', 'pct')
                            ->leftJoin('usrRg.idEmpleado', 'usrRgEmp')
                            ->leftJoin('empsoldiag.idTipoEmpleado', 'tpEmp');
        
        $query->leftJoin('prc.idExpedienteFicticio', 'unknExp')->leftJoin('MinsalSiapsBundle:MntExpediente', 'explocal',
                                    \Doctrine\ORM\Query\Expr\Join::WITH,
                                            $query->expr()->andx(
                                                $query->expr()->eq('pct.id', 'explocal.idPaciente'),
                                                $query->expr()->eq('explocal.idEstablecimiento', ':id_est_explocal')
                                            )
                            )
                            ->setParameter('id_est_explocal', $id_estab);

        $query->andWhere($query->expr()->orx(
                            $query->expr()->eq('soldiag.idEstablecimientoSolicitado', ':id_est_sol'),
                            $query->expr()->eq('aams.idEstablecimiento', ':id_est')
                        ))
                            ->setParameter('id_est_sol', $id_estab)
                            ->setParameter('id_est', $id_estab);

        $query->orderBy('soldiag.fechaCreacion', 'desc')
                            ->addOrderBy('soldiag.id', 'desc')
                            ->distinct();
        
        /*
         * --| add filters from BSTABLE_FILTER to query
         */
        $simagd_er_model    = $this->getEntityManager()->getRepository('MinsalSimagdBundle:ImgSolicitudEstudio');
        $apply_filters      = $simagd_er_model->getBsTableFiltersV2($query, $bs_filters);
        if ($apply_filters !== false)
        {
            $query->andWhere($apply_filters);
        }
        /*
         * |-- END filters from BSTABLE_FILTER to query
         */

        return $query->getQuery()->getScalarResult();
    }
}
