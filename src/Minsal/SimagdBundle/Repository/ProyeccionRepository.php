<?php

namespace Minsal\SimagdBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ProyeccionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProyeccionRepository extends EntityRepository
{
    public function obtenerModalidadesRealizables($id_estab, $idAtencion = '97')
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('m')
                            ->from('MinsalSiapsBundle:CtlAreaServicioDiagnostico', 'm')
                            ->innerJoin('MinsalSiapsBundle:MntAreaExamenEstablecimiento', 'mr',
                                    \Doctrine\ORM\Query\Expr\Join::WITH,
                                    'm.id = mr.idAreaServicioDiagnostico')
                            ->where('mr.idEstablecimiento = :id_est')
                            ->setParameter('id_est', $id_estab)
                            ->andWhere('m.idAtencion = :id_atn')
                            ->setParameter('id_atn', $idAtencion)
                            ->andWhere('mr.imgHabilitado = TRUE')
                            ->orderBy('m.nombrearea');
        $query->distinct();
        
        return $query->getQuery()->getResult();
    }
    
    public function obtenerProyeccionesRealizables($id_estab, $idAreaServicioDiagnostico, $idSexo, $idAtencion = '97')
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('expl')
                            ->from('MinsalSimagdBundle:ImgCtlProyeccion', 'expl')
                            ->innerJoin('MinsalSimagdBundle:ImgCtlProyeccionEstablecimiento', 'explrz',
                                    \Doctrine\ORM\Query\Expr\Join::WITH,
                                    'expl.id = explrz.idProyeccion')
                            ->innerJoin('explrz.idAreaExamenEstab', 'mr')
                            ->innerJoin('mr.idAreaServicioDiagnostico', 'm')
                            ->innerJoin('mr.idExamenServicioDiagnostico', 'exm')
                            ->where('mr.idEstablecimiento = :id_est')
                            ->setParameter('id_est', $id_estab)
                            ->andWhere('m.id = :id_mod')
                            ->setParameter('id_mod', $idAreaServicioDiagnostico)
                            ->andWhere('m.idAtencion = :id_atn')
                            ->setParameter('id_atn', $idAtencion)
                            ->andWhere('exm.idAtencion = :id_atn_exm')
                            ->setParameter('id_atn_exm', $idAtencion);
        
        $query->andWhere($query->expr()->orx(
                                $query->expr()->eq('exm.idsexo', ':id_sexo'),
                                $query->expr()->isNull('exm.idsexo')
                            ))
                            ->setParameter('id_sexo', $idSexo)
                            ->andWhere('mr.imgHabilitado = TRUE')
                            ->andWhere('explrz.habilitado = TRUE')
                            ->orderBy('expl.idExamenServicioDiagnostico') //INTENTAR HACER EL OUTGROUP DEL SELECT
                            ->addOrderBy('expl.nombre');
        
        $query->distinct();
        
        return $query->getQuery()->getResult();
    }
    
    public function obtenerExamenes($id_estab, $idAreaServicioDiagnostico, $idAtencion = '97')   //Talvez considerar habilitado para modalidades, exam y expl
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('exm')
                            ->from('MinsalSiapsBundle:CtlExamenServicioDiagnostico', 'exm')
                            ->innerJoin('MinsalSiapsBundle:MntAreaExamenEstablecimiento', 'mr',
                                    \Doctrine\ORM\Query\Expr\Join::WITH,
                                    'exm.id = mr.idExamenServicioDiagnostico')
                            ->where('mr.idEstablecimiento = :id_est')
                            ->setParameter('id_est', $id_estab)
                            ->andWhere('mr.idAreaServicioDiagnostico = :id_mod')
                            ->setParameter('id_mod', $idAreaServicioDiagnostico)
                            ->andWhere('exm.idAtencion = :id_atn')
                            ->setParameter('id_atn', $idAtencion)
                            ->andWhere('mr.imgHabilitado = TRUE')
                            ->orderBy('exm.descripcion');
        $query->distinct();
        
        return $query->getQuery()->getResult();
    }
    
    public function obtenerEstabDiagnosticantes($idAreaServicioDiagnostico, $idProyeccionesSolicitadas, $return = 'result')
    {
	$aliasNum = 0;
	
        $examenesIdArray = $this->obtenerExamenesPorExplArray($idProyeccionesSolicitadas);
                
        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('stdiag')
                            ->from('MinsalSiapsBundle:CtlEstablecimiento', 'stdiag');
        
        foreach ($examenesIdArray as $idExamenServicioDiagnostico) {
            $query->andWhere($query->expr()->exists($this->obtenerSubQueryEstabDiag($aliasNum)))
                                ->setParameter('id_mod', $idAreaServicioDiagnostico)
                                ->setParameter('id_exm' . $aliasNum, $idExamenServicioDiagnostico);
            ++$aliasNum;

        }
        
        $query->orderBy('stdiag.idTipoEstablecimiento')
                            ->addOrderBy('stdiag.nombre');
        
        $query->distinct();
        
        if ( count($examenesIdArray) < 1 ) { $query->setMaxResults(0); }

        return ($return == 'query' ) ? $query : $query->getQuery()->getResult();
    }
    
    public function obtenerSubQueryEstabDiag($aliasNum)
    {
        /** SubQuery */
        $subQuery = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('mr' . $aliasNum)
                            ->from('MinsalSiapsBundle:MntAreaExamenEstablecimiento', 'mr' . $aliasNum)
                            ->where('stdiag.id = mr' . $aliasNum . '.idEstablecimiento')
                            ->andWhere('mr' . $aliasNum . '.idAreaServicioDiagnostico = :id_mod')
                            ->andWhere('mr' . $aliasNum . '.idExamenServicioDiagnostico = :id_exm' . $aliasNum)
                            ->andWhere('mr' . $aliasNum . '.imgRealizaLectura = TRUE');

        return $subQuery->getDql();
    }
    
    public function obtenerExamenesPorExplArray($idProyeccionesSolicitadas, $unique = true)
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('exm.id')
                            ->from('MinsalSiapsBundle:CtlExamenServicioDiagnostico', 'exm')
                            ->innerJoin('MinsalSimagdBundle:ImgCtlProyeccion', 'expl',
                                    \Doctrine\ORM\Query\Expr\Join::WITH,
                                    'exm.id = expl.idExamenServicioDiagnostico')
                            ->where('expl.id IN (:id_expl_array)')
                            ->setParameter('id_expl_array', $idProyeccionesSolicitadas);

	if ($unique ) { $query->distinct(); }
        
        $ids = array();
        foreach($query->getQuery()->getScalarResult() as $resultado) {
            $ids[] = $resultado['id'];
        }

        return $unique ? array_unique($ids) : $ids;
    }
    
    public function obtenerProyeccionesNoAgregadas($id_estab, $idAreaServicioDiagnostico, $idExamenServicioDiagnostico)
    {
        /** SubQuery */
        $subQuery = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('explrz')
                            ->from('MinsalSimagdBundle:ImgCtlProyeccionEstablecimiento', 'explrz')
                            ->innerJoin('explrz.idAreaExamenEstab', 'mr')
                            ->where('expl.id = explrz.idProyeccion')
                            ->andWhere('mr.idEstablecimiento = :id_est')
                            ->andWhere('mr.idAreaServicioDiagnostico = :id_mod');
                
        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('expl')
                            ->from('MinsalSimagdBundle:ImgCtlProyeccion', 'expl')
                            ->where('expl.idExamenServicioDiagnostico = :id_exm')
                            ->setParameter('id_exm', $idExamenServicioDiagnostico);

        $query->andWhere($query->expr()->not($query->expr()->exists($subQuery->getDql())))
                            ->setParameter('id_est', $id_estab)
                            ->setParameter('id_mod', $idAreaServicioDiagnostico);
        
        $query->orderBy('expl.idExamenServicioDiagnostico')
                            ->addOrderBy('expl.nombre');
                
        $query->distinct();
        
        return $query->getQuery()->getResult();
    }
    
    public function obtenerAccesoEstab($id, $idEstab)
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('explrz.id as explrzId')
                            ->from('MinsalSimagdBundle:ImgCtlProyeccionEstablecimiento', 'explrz')
                            ->innerJoin('explrz.idAreaExamenEstab', 'mr')
                            ->where('explrz.id = :id_explrz')
                            ->setParameter('id_explrz', $id)
                            ->andWhere('mr.idEstablecimiento = :id_est')
                            ->setParameter('id_est', $idEstab);

        $query->distinct();
        $query->setMaxResults(1);
        
        return $query->getQuery()->getOneOrNullResult() ? true : false;
    }
    
    public function obtenerProyeccionesLocales($id_estab, $bs_filters = array())
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('explrz', 'mr', 'expl')
                            ->from('MinsalSimagdBundle:ImgCtlProyeccionEstablecimiento', 'explrz')
                            ->innerJoin('explrz.idAreaExamenEstab', 'mr')
                            ->innerJoin('explrz.idProyeccion', 'expl')
                            ->where('mr.idEstablecimiento = :id_est')
                            ->setParameter('id_est', $id_estab)
                            ->orderBy('mr.idAreaServicioDiagnostico')
                            ->addOrderBy('mr.idExamenServicioDiagnostico')
                            ->addOrderBy('expl.nombre'); //INTENTAR HACER EL OUTGROUP DEL SELECT
        
        $query->distinct();
        
        return $query->getQuery()->getResult();
    }
    
    public function existeProyeccionEnLocal($id_estab, $idProyeccion)
    {
        /** SubQuery */
        $subQuery = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('explrz')
                            ->from('MinsalSimagdBundle:ImgCtlProyeccionEstablecimiento', 'explrz')
                            ->innerJoin('explrz.idAreaExamenEstab', 'mr')
                            ->where('expl.id = explrz.idProyeccion')
                            ->andWhere('mr.idEstablecimiento = :id_est');
                
        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('expl.id as explId')
                            ->from('MinsalSimagdBundle:ImgCtlProyeccion', 'expl')
                            ->where('expl.id = :id_expl')
                            ->setParameter('id_expl', $idProyeccion);

        $query->andWhere($query->expr()->not($query->expr()->exists($subQuery->getDql())))
                            ->setParameter('id_est', $id_estab);

        $query->distinct();
        $query->setMaxResults(1);
        
        return $query->getQuery()->getOneOrNullResult() ? true : false;
    }

    public function obtenerProyeccionesV2($bs_filters = array())
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder('expl')
                            ->select('expl')
                            ->addSelect('exm')
                            ->addSelect('IDENTITY(exm.idAtencion) as exm_id_atencion')
                            ->addSelect('usrRg.username as expl_usernameUserReg, usrRg.id as expl_id_userReg, usrMd.username as expl_usernameUserMod, usrMd.id as expl_id_userMod')
                            ->addSelect('concat(coalesce(usrRgEmp.apellido, \'\'), \', \', coalesce(usrRgEmp.nombre, \'\')) as expl_nombreUserReg')
                            ->addSelect('case when (usrMd.username is not null) then concat(coalesce(usrMdEmp.apellido, \'\'), \', \', coalesce(usrMdEmp.nombre, \'\')) else \'\' end as expl_nombreUserMod')
                            ->addSelect('case when (sex.id is not null) then sex.nombre else \'Todos los sexos\' end as exm_sexo')
                            ->from('MinsalSimagdBundle:ImgCtlProyeccion', 'expl')
                            ->innerJoin('expl.idExamenServicioDiagnostico', 'exm')
                            ->leftJoin('exm.idsexo', 'sex')
                            ->innerJoin('expl.idUserReg', 'usrRg')
                            ->leftJoin('expl.idUserMod', 'usrMd')
                            ->innerJoin('usrRg.idEmpleado', 'usrRgEmp')
                            ->leftJoin('usrMd.idEmpleado', 'usrMdEmp')
                            ->orderBy('exm.id', 'desc')
                            ->addOrderBy('expl.id', 'desc')
                            ->distinct();
        
        /*
         * --| add filters from BSTABLE_FILTER to query
         */
        $simagd_er_model    = $this->getEntityManager()->getRepository('MinsalSimagdBundle:ImgSolicitudEstudio');
        $apply_filters      = $simagd_er_model->getBsTableFiltersV2($query, $bs_filters);
        if ($apply_filters !== false)
        {
            $query->andWhere($apply_filters);
        }
        /*
         * |-- END filters from BSTABLE_FILTER to query
         */

        return $query->getQuery()->getScalarResult();
    }
    
    public function obtenerProyeccionesSolicitudEstudio($idSolicitud)
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder('expl')
                            ->select('expl')
                            ->addSelect('exm')
                            ->addSelect('prcExpl')
                            ->addSelect('IDENTITY(exm.idAtencion) as exm_id_atencion')
                            ->addSelect('case when (sex.id is not null) then sex.nombre else \'Todos los sexos\' end as exm_sexo')
                            ->from('MinsalSimagdBundle:ImgCtlProyeccion', 'expl')
                            ->innerJoin('expl.idExamenServicioDiagnostico', 'exm')
                            ->leftJoin('exm.idsexo', 'sex')
                            ->innerJoin('MinsalSimagdBundle:ImgSolicitudEstudioProyeccion', 'prcExpl',
                                    \Doctrine\ORM\Query\Expr\Join::WITH,
                                    'expl.id = prcExpl.idProyeccionSolicitada')
                            ->where('prcExpl.idSolicitudEstudio = :id_solest')
                            ->setParameter('id_solest', $idSolicitud)
                            ->orderBy('exm.id', 'desc')
                            ->addOrderBy('expl.id', 'desc')
                            ->distinct();

        return $query->getQuery()->getScalarResult();
    }

    public function obtenerProyeccionesLocalesV2($id_estab, $bs_filters = array())
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder('explrz')
                            ->select('explrz')
                            ->addSelect('expl')
                            ->addSelect('mr')
                            ->addSelect('exm')
                            ->addSelect('m')
                            ->addSelect('IDENTITY(exm.idAtencion) as exm_id_atencion, IDENTITY(m.idAtencion) as m_id_atencion')
                            ->addSelect('usrRg.username as explrz_usernameUserReg, usrRg.id as explrz_id_userReg, usrMd.username as explrz_usernameUserMod, usrMd.id as explrz_id_userMod')
                            ->addSelect('concat(coalesce(usrRgEmp.apellido, \'\'), \', \', coalesce(usrRgEmp.nombre, \'\')) as explrz_nombreUserReg')
                            ->addSelect('case when (usrMd.username is not null) then concat(coalesce(usrMdEmp.apellido, \'\'), \', \', coalesce(usrMdEmp.nombre, \'\')) else \'\' end as explrz_nombreUserMod')
                            ->addSelect('case when (sex.id is not null) then sex.nombre else \'Todos los sexos\' end as exm_sexo')
                            ->from('MinsalSimagdBundle:ImgCtlProyeccionEstablecimiento', 'explrz')
                            ->innerJoin('explrz.idProyeccion', 'expl')
                            ->innerJoin('explrz.idAreaExamenEstab', 'mr')
                            ->innerJoin('mr.idAreaServicioDiagnostico', 'm')
                            ->innerJoin('expl.idExamenServicioDiagnostico', 'exm')
                            ->leftJoin('exm.idsexo', 'sex')
                            ->innerJoin('explrz.idUserReg', 'usrRg')
                            ->leftJoin('explrz.idUserMod', 'usrMd')
                            ->innerJoin('usrRg.idEmpleado', 'usrRgEmp')
                            ->leftJoin('usrMd.idEmpleado', 'usrMdEmp')
                            ->where('mr.idEstablecimiento = :id_est')
                            ->setParameter('id_est', $id_estab)
                            ->orderBy('m.id', 'desc')
                            ->addOrderBy('exm.id', 'desc')
                            ->addOrderBy('expl.id', 'desc')
                            ->distinct();
        
        /*
         * --| add filters from BSTABLE_FILTER to query
         */
        $simagd_er_model    = $this->getEntityManager()->getRepository('MinsalSimagdBundle:ImgSolicitudEstudio');
        $apply_filters      = $simagd_er_model->getBsTableFiltersV2($query, $bs_filters);
        if ($apply_filters !== false)
        {
            $query->andWhere($apply_filters);
        }
        /*
         * |-- END filters from BSTABLE_FILTER to query
         */

        return $query->getQuery()->getScalarResult();
    }
    
    public function existeProyeccionEnLocalV2($id_estab, $idProyeccion)
    {
        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('explrz.id as explrzId')
                            ->from('MinsalSimagdBundle:ImgCtlProyeccionEstablecimiento', 'explrz')
                            ->innerJoin('explrz.idAreaExamenEstab', 'mr')
                            ->where('explrz.idProyeccion = :id_expl')
                            ->setParameter('id_expl', $idProyeccion)
                            ->andWhere('mr.idEstablecimiento = :id_est')
                            ->setParameter('id_est', $id_estab);

        $query->distinct();
        $query->setMaxResults(1);
        
        return $query->getQuery()->getOneOrNullResult() ? true : false;
    }

    public function obtenerProyeccionesScalarV2($return = 'scalar')
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder('expl')
                            ->select('expl')
                            ->addSelect('exm')
                            ->from('MinsalSimagdBundle:ImgCtlProyeccion', 'expl')
                            ->innerJoin('expl.idExamenServicioDiagnostico', 'exm')
                            ->orderBy('exm.id', 'desc')
                            ->addOrderBy('expl.id', 'desc')
                            ->distinct();

	if($return == 'scalar')
	{
	    $query->addSelect('expl.id as id, expl.nombre as text, expl.codigo as cod, IDENTITY(expl.idExamenServicioDiagnostico) as exmGroup');
	}

        return $return == 'query' ?
	    $query : ($return == 'scalar' ? $query->getQuery()->getScalarResult()
		: $query->getQuery()->getResult()
	    );
    }

    public function obtenerProyeccionesAgrupadasV2($id_estabLocal, $id_atencion = '97', $return = 'scalar')
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('m.id as id_m, expl.id as id_expl')
                            ->from('MinsalSimagdBundle:ImgCtlProyeccion', 'expl')
                            ->innerJoin('MinsalSimagdBundle:ImgCtlProyeccionEstablecimiento', 'explrz',
                                    \Doctrine\ORM\Query\Expr\Join::WITH,
                                    'expl.id = explrz.idProyeccion')
                            ->innerJoin('explrz.idAreaExamenEstab', 'mr')
                            ->innerJoin('mr.idAreaServicioDiagnostico', 'm')
                            ->where('mr.idEstablecimiento = :id_est')
                            ->setParameter('id_est', $id_estabLocal)
                            ->andWhere('m.idAtencion = :id_atn')
                            ->setParameter('id_atn', $id_atencion)
                            ->andWhere('mr.imgHabilitado = TRUE')
                            ->andWhere('explrz.habilitado = TRUE')
                            ->groupBy('m.id')
                            ->addGroupBy('expl.id')
                            ->orderBy('m.id', 'desc')
                            ->addOrderBy('expl.id', 'desc')
                            ->distinct();

        return $return == 'query' ?
	    $query : ($return == 'scalar' ? $query->getQuery()->getScalarResult()
		: $query->getQuery()->getResult()
	    );
    }
    
    public function obtenerProyeccionesSolicitudEstudioComplementario($id_solcmpl)
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder('expl')
                            ->select('expl')
                            ->addSelect('exm')
                            ->addSelect('solcmplExpl')
                            ->addSelect('IDENTITY(exm.idAtencion) as exm_id_atencion')
                            ->addSelect('case when (sex.id is not null) then sex.nombre else \'Todos los sexos\' end as exm_sexo')
                            ->from('MinsalSimagdBundle:ImgCtlProyeccion', 'expl')
                            ->innerJoin('expl.idExamenServicioDiagnostico', 'exm')
                            ->leftJoin('exm.idsexo', 'sex')
                            ->innerJoin('MinsalSimagdBundle:ImgSolicitudEstudioComplementarioProyeccion', 'solcmplExpl',
                                    \Doctrine\ORM\Query\Expr\Join::WITH,
                                    'expl.id = solcmplExpl.idProyeccionSolicitada')
                            ->where('solcmplExpl.idSolicitudEstudioComplementario = :id_solcmpl')
                            ->setParameter('id_solcmpl', $id_solcmpl)
                            ->orderBy('exm.id', 'desc')
                            ->addOrderBy('expl.id', 'desc')
                            ->distinct();

        return $query->getQuery()->getScalarResult();
    }
    
}
