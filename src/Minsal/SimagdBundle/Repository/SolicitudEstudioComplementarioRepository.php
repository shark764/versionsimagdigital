<?php

namespace Minsal\SimagdBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * SolicitudEstudioComplementarioRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SolicitudEstudioComplementarioRepository extends EntityRepository
{
    public function obtenerSolicitudesEstudioComplementario($id_estab, $bs_filters = array())
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('solcmpl')
                            ->from('MinsalSimagdBundle:ImgSolicitudEstudioComplementario', 'solcmpl')
                            ->innerJoin('solcmpl.idSolicitudEstudio', 'prc')
                            ->innerJoin('solcmpl.idEstudioPadre', 'est');

        $query->where($query->expr()->orx(
                            $query->expr()->eq('solcmpl.idEstablecimientoSolicitado', ':id_est_sol'),
                            $query->expr()->eq('prc.idEstablecimientoReferido', ':id_est_ref'),
                            $query->expr()->eq('prc.idEstablecimientoDiagnosticante', ':id_est_diag'),
                            $query->expr()->eq('est.idEstablecimiento', ':id_est')
                        ))
                            ->setParameter('id_est_sol', $id_estab)
                            ->setParameter('id_est_ref', $id_estab)
                            ->setParameter('id_est_diag', $id_estab)
                            ->setParameter('id_est', $id_estab);
        
        $query->orderBy('solcmpl.fechaSolicitud', 'desc')
                            ->addOrderBy('solcmpl.id', 'desc');
                
        $query->distinct();
        
        return $query->getQuery()->getResult();
    }

    public function obtenerSolicitudesEstudioComplementarioV2($id_estab, $bs_filters = array())
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder('solcmpl')
                            ->select('solcmpl')
                            ->addSelect('est')
                            ->addSelect('statusSc')
                            ->addSelect('explocal')->addSelect('unknExp')
                            ->addSelect('prAtn')

                            ->addSelect('solcmpl.id as id, stdroot.nombre as origen, concat(pct.primerApellido, \' \', coalesce(pct.segundoApellido, \'\'), \', \', pct.primerNombre, \' \', coalesce(pct.segundoNombre, \'\')) as paciente, explocal.numero as numero_expediente, case when (empcmpl.id is not null) then concat(coalesce(empcmpl.apellido, \'\'), \', \', coalesce(empcmpl.nombre, \'\')) else \'\' end as medico, ar.nombre as area_atencion, atn.nombre as atencion, m.nombrearea as modalidad, prAtn.nombre as triage, solcmpl.fechaSolicitud as fecha_solicitud')

                            ->addSelect('prc.fechaCreacion as prc_fechaCreacion, prz.fechaAlmacenado as prz_fechaAlmacenado')
                            ->addSelect('concat(pct.primerApellido, \' \', coalesce(pct.segundoApellido, \'\'), \', \', pct.primerNombre, \' \', coalesce(pct.segundoNombre, \'\')) as prc_paciente')
                            ->addSelect('stdroot.nombre as prc_origen, stdroot.id as prc_id_origen, ar.nombre as prc_areaAtencion, ar.id as prc_id_areaAtencion, atn.nombre as prc_atencion, atn.id as prc_id_atencion')
                            ->addSelect('concat(coalesce(empprc.apellido, \'\'), \', \', coalesce(empprc.nombre, \'\')) as prc_solicitante')
                            ->addSelect('concat(coalesce(empcmpl.apellido, \'\'), \', \', coalesce(empcmpl.nombre, \'\')) as solcmpl_solicitante, empcmpl.id as solcmpl_id_solicitante, tpEmp.tipo as solcmpl_tipoEmpleado')
                            ->addSelect('stdref.nombre as prc_referido, stdref.id as prc_id_referido, stdiag.nombre as prc_diagnosticante, stdiag.id as prc_id_diagnosticante, stdcmpl.nombre as solcmpl_solicitado, stdcmpl.id as solcmpl_id_solicitado')
                            ->addSelect('m.nombrearea as prc_modalidad, m.id as prc_id_modalidad, prAtn.nombre as solcmpl_prioridadAtencion, prAtn.id as solcmpl_id_prioridad, prAtn.codigo as solcmpl_codigoPrioridad, mcmpl.nombrearea as solcmpl_modalidad, mcmpl.id as solcmpl_id_modalidad')
                            ->addSelect('usrRg.username as solcmpl_usernameUserReg, usrRg.id as solcmpl_id_userReg')
                            ->addSelect('concat(coalesce(usrRgEmp.apellido, \'\'), \', \', coalesce(usrRgEmp.nombre, \'\')) as solcmpl_nombreUserReg')
                            ->addSelect('case when (tcnlprz.id is not null) then concat(coalesce(tcnlprz.apellido, \'\'), \', \', coalesce(tcnlprz.nombre, \'\')) else \'\' end as prz_tecnologo')
                            ->from('MinsalSimagdBundle:ImgSolicitudEstudioComplementario', 'solcmpl')
                            ->leftJoin('solcmpl.idSolicitudEstudio', 'prc')
                            ->innerJoin('solcmpl.idEstudioPadre', 'est')
                            ->innerJoin('solcmpl.idAreaServicioDiagnostico', 'mcmpl')
                            ->leftJoin('solcmpl.idRadiologoSolicita', 'empcmpl')
                            ->innerJoin('est.idProcedimientoRealizado', 'prz')
                            ->innerJoin('prz.idTecnologoRealiza', 'tcnlprz')
                            ->innerJoin('solcmpl.idUserReg', 'usrRg')
                            ->leftJoin('prc.idAtenAreaModEstab', 'aams')
                            ->leftJoin('prc.idEmpleado', 'empprc')
                            ->leftJoin('prc.idExpediente', 'exp')
                            ->leftJoin('prc.idAreaServicioDiagnostico', 'm')
                            ->leftJoin('prc.idEstablecimientoReferido', 'stdref')
                            ->leftJoin('prc.idEstablecimientoDiagnosticante', 'stdiag')
                            ->leftJoin('solcmpl.idEstablecimientoSolicitado', 'stdcmpl')
                            ->leftJoin('solcmpl.idPrioridadAtencion', 'prAtn')
                            ->leftJoin('prc.idFormaContacto', 'frCt')
                            ->leftJoin('prc.idContactoPaciente', 'ctPct')
                            ->leftJoin('aams.idAtencion', 'atn')
                            ->leftJoin('aams.idAreaModEstab', 'ams')
                            ->leftJoin('aams.idEstablecimiento', 'stdroot')
                            ->leftJoin('ams.idAreaAtencion', 'ar')
                            ->leftJoin('exp.idPaciente', 'pct')
                            ->innerJoin('usrRg.idEmpleado', 'usrRgEmp')
                            ->leftJoin('empcmpl.idTipoEmpleado', 'tpEmp')
                            ->leftJoin('solcmpl.idEstadoSolicitud', 'statusSc');
        
        $query->leftJoin('prc.idExpedienteFicticio', 'unknExp')->leftJoin('MinsalSiapsBundle:MntExpediente', 'explocal',
                                    \Doctrine\ORM\Query\Expr\Join::WITH,
                                            $query->expr()->andx(
                                                $query->expr()->eq('pct.id', 'explocal.idPaciente'),
                                                $query->expr()->eq('explocal.idEstablecimiento', ':id_est_explocal')
                                            )
                            )
                            ->setParameter('id_est_explocal', $id_estab);

        $query->where($query->expr()->orx(
                            $query->expr()->eq('solcmpl.idEstablecimientoSolicitado', ':id_est_sol'),
                            $query->expr()->eq('prc.idEstablecimientoReferido', ':id_est_ref'),
                            $query->expr()->eq('prc.idEstablecimientoDiagnosticante', ':id_est_diag'),
                            $query->expr()->eq('est.idEstablecimiento', ':id_est')
                        ))
                            ->setParameter('id_est_sol', $id_estab)
                            ->setParameter('id_est_ref', $id_estab)
                            ->setParameter('id_est_diag', $id_estab)
                            ->setParameter('id_est', $id_estab);
        
        $query->orderBy('solcmpl.fechaSolicitud', 'desc')
                            ->addOrderBy('solcmpl.id', 'desc')
                            ->distinct();
        
        /*
         * --| add filters from BSTABLE_FILTER to query
         */
        $simagd_er_model    = $this->getEntityManager()->getRepository('MinsalSimagdBundle:ImgSolicitudEstudio');
        $apply_filters      = $simagd_er_model->getBsTableFiltersV2($query, $bs_filters);
        if ($apply_filters !== false)
        {
            $query->andWhere($apply_filters);
        }
        /*
         * |-- END filters from BSTABLE_FILTER to query
         */

        return $query->getQuery()->getScalarResult();
    }
    
}
