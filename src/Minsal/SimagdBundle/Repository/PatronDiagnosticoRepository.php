<?php

namespace Minsal\SimagdBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * PatronDiagnosticoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PatronDiagnosticoRepository extends EntityRepository
{
    public function obtenerPatronesDiagnosticoV2($id_estab, $bs_filters = array())
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder('ptrDiag')
                            ->select('ptrDiag')
                            ->addSelect('m')
                            ->addSelect('tpR')

                            ->addSelect('ptrDiag.id as id, ptrDiag.nombre as nombre, ptrDiag.codigo as codigo, ptrDiag.habilitado as habilitado, ptrDiag.conclusion as conclusion, ptrDiag.fechaHoraReg as fecha_registro, ptrDiag.fechaHoraMod as fecha_edicion, m.nombrearea as modalidad, case when (radX.id is not null) then concat(coalesce(radX.apellido, \'\'), \', \', coalesce(radX.nombre, \'\')) else \'\' end as radiologo, tpR.nombreTipo as tipo_resultado, concat(coalesce(empptrDiag.apellido, \'\'), \', \', coalesce(empptrDiag.nombre, \'\')) as empleado')

                            ->addSelect('IDENTITY(m.idAtencion) as m_id_atencion')
                            ->addSelect('case when (radX.id is not null) then concat(coalesce(radX.apellido, \'\'), \', \', coalesce(radX.nombre, \'\')) else \'\' end as ptrDiag_radiologo, radX.id as ptrDiag_id_radiologo')
                            ->addSelect('concat(coalesce(empptrDiag.apellido, \'\'), \', \', coalesce(empptrDiag.nombre, \'\')) as ptrDiag_empleado, empptrDiag.id as ptrDiag_id_empleado, tpEmp.tipo as ptrDiag_tipoEmpleado')
                            ->addSelect('usrRg.username as ptrDiag_usernameUserReg, usrRg.id as ptrDiag_id_userReg, usrMd.username as ptrDiag_usernameUserMod, usrMd.id as ptrDiag_id_userMod')
                            ->addSelect('concat(coalesce(usrRgEmp.apellido, \'\'), \', \', coalesce(usrRgEmp.nombre, \'\')) as ptrDiag_nombreUserReg')
                            ->addSelect('case when (usrMd.username is not null) then concat(coalesce(usrMdEmp.apellido, \'\'), \', \', coalesce(usrMdEmp.nombre, \'\')) else \'\' end as ptrDiag_nombreUserMod')
                            ->from('MinsalSimagdBundle:ImgCtlPatronDiagnostico', 'ptrDiag')
                            ->innerJoin('ptrDiag.idAreaServicioDiagnostico', 'm')
                            ->leftJoin('ptrDiag.idRadiologoDefine', 'radX')
                            ->innerJoin('ptrDiag.idTipoResultado', 'tpR')
                            ->innerJoin('ptrDiag.idEmpleadoRegistra', 'empptrDiag')
                            ->leftJoin('empptrDiag.idTipoEmpleado', 'tpEmp')
                            ->innerJoin('ptrDiag.idUserReg', 'usrRg')
                            ->leftJoin('ptrDiag.idUserMod', 'usrMd')
                            ->innerJoin('usrRg.idEmpleado', 'usrRgEmp')
                            ->leftJoin('usrMd.idEmpleado', 'usrMdEmp')
                            ->where('ptrDiag.idEstablecimiento = :id_est')
                            ->setParameter('id_est', $id_estab)
                            ->orderBy('m.id', 'asc')
                            ->addOrderBy('radX.id', 'asc')
                            ->addOrderBy('ptrDiag.id', 'desc')
                            ->distinct();

        /*
         * --| add filters from BSTABLE_FILTER to query
         */
        $simagd_er_model    = $this->getEntityManager()->getRepository('MinsalSimagdBundle:ImgSolicitudEstudio');
        $apply_filters      = $simagd_er_model->getBsTableFiltersV2($query, $bs_filters);
        if ($apply_filters !== false)
        {
            $query->andWhere($apply_filters);
        }
        /*
         * |-- END filters from BSTABLE_FILTER to query
         */

        return $query->getQuery()->getScalarResult();
    }

    public function obtenerPatronesDiagnosticoUtilizablesV2($id_estab, $idAtencion = '97')
    {
        /** SubQuery */
        $subQuery = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('mr')
                            ->from('MinsalSiapsBundle:MntAreaExamenEstablecimiento', 'mr')
                            ->where('m.id = mr.idAreaServicioDiagnostico')
                            ->andWhere('mr.imgHabilitado = TRUE')
                            ->andWhere('mr.idEstablecimiento = :id_est');

        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('ptrDiag')
                            ->addSelect('m')
                            ->addSelect('radxPtrDiag')
                            ->from('MinsalSimagdBundle:ImgCtlPatronDiagnostico', 'ptrDiag')
                            ->innerJoin('ptrDiag.idAreaServicioDiagnostico', 'm')
                            ->leftJoin('ptrDiag.idRadiologoDefine', 'radxPtrDiag')
                            ->where('ptrDiag.habilitado = TRUE')
                            ->andWhere('m.idAtencion = :id_atn')
                            ->setParameter('id_atn', $idAtencion);

        $query->andWhere($query->expr()->exists($subQuery->getDql()))
                            ->setParameter('id_est', $id_estab)
                            ->orderBy('m.id', 'asc')
                            ->addOrderBy('ptrDiag.nombre', 'asc')
                            ->addOrderBy('radxPtrDiag.id', 'asc')
                            ->addOrderBy('ptrDiag.id', 'desc')
                            ->distinct();

        return $query;
    }

}