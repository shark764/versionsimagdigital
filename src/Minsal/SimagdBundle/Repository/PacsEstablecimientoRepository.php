<?php

namespace Minsal\SimagdBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * PacsEstablecimientoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PacsEstablecimientoRepository extends EntityRepository
{
    /* Funcion que retorna los datos para realizar
       la conexion al PACS de acuerdo al establecimiento
       que realizo la prueba */
    public function getConnectionData($id_estab, $bs_filters = array())
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('m')
                            ->from('MinsalSimagdBundle:ImgCtlPacsEstablecimiento', 'm')
                            ->where('m.idEstablecimiento = :id_est')
                            ->setParameter('id_est', $id_estab)
                            ->andWhere('m.habilitado = :habilitado')
                            ->setParameter('habilitado', TRUE)
                           ;
        $query->distinct();

        return $query->getQuery()->getResult();
    }

    public function data($bs_filters = array())
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder('pacs')
                            ->select('pacs')
                            ->addSelect('mtrBd')

                            ->addSelect('pacs.id AS id, pacs.nombreConexion AS conexion, pacs.habilitado AS habilitado, pacs.ip AS ip, pacs.usuario AS usuario, pacs.puerto AS puerto, pacs.host AS host, pacs.duracionEstudio AS duracion_estudio, pacs.nombreBaseDatos AS base_datos, pacs.fechaHoraReg AS fecha_registro, pacs.fechaHoraMod AS fecha_edicion, mtrBd.nombre AS motor')

                            ->addSelect('stdpacs.nombre AS pacs_establecimiento, stdpacs.id AS pacs_id_establecimiento')
                            ->addSelect('usrRg.username AS pacs_usernameUserReg, usrRg.id AS pacs_id_userReg, usrMd.username AS pacs_usernameUserMod, usrMd.id AS pacs_id_userMod')
                            ->addSelect('CONCAT(COALESCE(usrRgEmp.apellido, \'\'), \', \', COALESCE(usrRgEmp.nombre, \'\')) AS pacs_nombreUserReg')
                            ->addSelect('CASE WHEN (usrMd.username IS NOT NULL) THEN CONCAT(COALESCE(usrMdEmp.apellido, \'\'), \', \', COALESCE(usrMdEmp.nombre, \'\')) ELSE \'\' END AS pacs_nombreUserMod')
                            ->from('MinsalSimagdBundle:ImgCtlPacsEstablecimiento', 'pacs')
                            ->innerJoin('pacs.idEstablecimiento', 'stdpacs')
                            ->innerJoin('pacs.idMotor', 'mtrBd')
                            ->innerJoin('pacs.idUserReg', 'usrRg')
                            ->leftJoin('pacs.idUserMod', 'usrMd')
                            ->innerJoin('usrRg.idEmpleado', 'usrRgEmp')
                            ->leftJoin('usrMd.idEmpleado', 'usrMdEmp')
                            ->orderBy('mtrBd.id', 'DESC')
                            ->addOrderBy('pacs.id', 'DESC')
                            ->distinct();

        /*
         * --| add filters from BSTABLE_FILTER to query
         */
        $simagd_er_model    = $this->getEntityManager()->getRepository('MinsalSimagdBundle:ImgSolicitudEstudio');
        $apply_filters      = $simagd_er_model->getBsTableFiltersV2($query, $bs_filters);
        if ($apply_filters !== false)
        {
            $query->andWhere($apply_filters);
        }
        /*
         * |-- END filters from BSTABLE_FILTER to query
         */

        return $query->getQuery()->getScalarResult();
    }

    public function getConfiguredServerPACSConnection($id_estab)
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('pacs')
                            ->from('MinsalSimagdBundle:ImgCtlPacsEstablecimiento', 'pacs')
                            ->where('pacs.idEstablecimiento = :id_est')
                            ->setParameter('id_est', $id_estab)
                            ->andWhere('pacs.habilitado = TRUE')
                            ->orderBy('pacs.id', 'DESC')
                            ->distinct()
                            ->setMaxResults(1);

        return $query->getQuery()->getOneOrNullResult();
    }
    
}