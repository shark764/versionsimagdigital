<?php

namespace Minsal\SimagdBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * MaterialRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MaterialRepository extends EntityRepository
{
    public function obtenerMaterialesNoAgregados($id_estab, $bs_filters = array())
    {
        /** SubQuery */
        $subQuery = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('mtrLc')
                            ->from('MinsalSimagdBundle:ImgCtlMaterialEstablecimiento', 'mtrLc')
                            ->where('mtrl.id = mtrLc.idMaterial')
                            ->andWhere('mtrLc.idEstablecimiento = :id_est');

        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('mtrl')
                            ->from('MinsalSimagdBundle:ImgCtlMaterial', 'mtrl');

        $query->andWhere($query->expr()->not($query->expr()->exists($subQuery->getDql())))
                            ->setParameter('id_est', $id_estab);

        $query->orderBy('mtrl.nombre');

        $query->distinct();

        return $query->getQuery()->getScalarResult();
    }

    public function obtenerMaterialesUtilizables($id_estab, $bs_filters = array())
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('mtrl')
                            ->from('MinsalSimagdBundle:ImgCtlMaterial', 'mtrl')
                            ->innerJoin('MinsalSimagdBundle:ImgCtlMaterialEstablecimiento', 'mtrLc',
                                    \Doctrine\ORM\Query\Expr\Join::WITH,
                                    'mtrl.id = mtrLc.idMaterial')
                            ->where('mtrLc.idEstablecimiento = :id_est')
                            ->setParameter('id_est', $id_estab)
			    ->andWhere('mtrLc.habilitado = TRUE')
			    ->andWhere('mtrLc.cantidadDisponible > 0');

        $query->distinct();

        return $query;
    }

    public function obtenerMaterialesLocales($id_estab, $bs_filters = array())
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('mtrLc', 'mtrl')
                            ->from('MinsalSimagdBundle:ImgCtlMaterialEstablecimiento', 'mtrLc')
                            ->innerJoin('mtrLc.idMaterial', 'mtrl')
                            ->where('mtrLc.idEstablecimiento = :id_est')
                            ->setParameter('id_est', $id_estab)
                            ->orderBy('mtrl.nombre', 'desc')
                            ->addOrderBy('mtrLc.cantidadDisponible'); //INTENTAR HACER EL OUTGROUP DEL SELECT

        $query->distinct();

        return $query->getQuery()->getResult();
    }

    public function existeMaterialEnLocal($id_estab, $idMaterial)
    {
        /** SubQuery */
        $subQuery = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('mtrLc')
                            ->from('MinsalSimagdBundle:ImgCtlMaterialEstablecimiento', 'mtrLc')
                            ->where('mtrl.id = mtrLc.idMaterial')
                            ->andWhere('mtrLc.idEstablecimiento = :id_est');

        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('mtrl.id as mtrlId')
                            ->from('MinsalSimagdBundle:ImgCtlMaterial', 'mtrl')
                            ->where('mtrl.id = :id_mtrl')
                            ->setParameter('id_mtrl', $idMaterial);

        $query->andWhere($query->expr()->not($query->expr()->exists($subQuery->getDql())))
                            ->setParameter('id_est', $id_estab);

        $query->distinct();
        $query->setMaxResults(1);

        return $query->getQuery()->getOneOrNullResult() ? true : false;
    }

    public function __obtenerMaterialesV2()
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder('mtrl')
                            ->select('mtrl')
                            ->from('MinsalSimagdBundle:ImgCtlMaterial', 'mtrl')
                            ->orderBy('mtrl.id', 'desc')
                            ->distinct();

        return $query->getQuery()->getScalarResult();
    }

    public function __obtenerMaterialesLocalesV2($id_estab, $bs_filters = array())
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder('mtrLc')
                            ->select('mtrLc')
                            ->addSelect('mtrl')
                            ->from('MinsalSimagdBundle:ImgCtlMaterialEstablecimiento', 'mtrLc')
                            ->innerJoin('mtrLc.idMaterial', 'mtrl')
                            ->where('mtrLc.idEstablecimiento = :id_est')
                            ->setParameter('id_est', $id_estab)
                            ->orderBy('mtrLc.id', 'desc')
                            ->distinct();

        return $query->getQuery()->getScalarResult();
    }

    public function existeMaterialEnLocalV2($id_estab, $idMaterial)
    {
        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('mtrLc.id as mtrLcId')
                            ->from('MinsalSimagdBundle:ImgCtlMaterialEstablecimiento', 'mtrLc')
                            ->where('mtrLc.idMaterial = :id_mtrl')
                            ->setParameter('id_mtrl', $idMaterial)
                            ->andWhere('mtrLc.idEstablecimiento = :id_est')
                            ->setParameter('id_est', $id_estab);

        $query->distinct();
        $query->setMaxResults(1);

        return $query->getQuery()->getOneOrNullResult() ? true : false;
    }

    public function obtenerMaterialesV2($bs_filters = array())
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder('mtrl')
                            ->select('mtrl')

                            ->addSelect('mtrl.id as id, mtrl.nombre as nombre, mtrl.codigo as codigo, sgm.nombre as subgrupo, sgm.codigo as codigo_subgrupo, gm.nombre as grupo, gm.codigo as codigo_grupo, mtrl.descripcion as descripcion, mtrl.fechaHoraReg as fecha_registro, mtrl.fechaHoraMod as fecha_edicion')

                            ->addSelect('usrRg.username as mtrl_usernameUserReg, usrRg.id as mtrl_id_userReg, usrMd.username as mtrl_usernameUserMod, usrMd.id as mtrl_id_userMod')
                            ->addSelect('concat(coalesce(usrRgEmp.apellido, \'\'), \', \', coalesce(usrRgEmp.nombre, \'\')) as mtrl_nombreUserReg')
                            ->addSelect('case when (usrMd.username is not null) then concat(coalesce(usrMdEmp.apellido, \'\'), \', \', coalesce(usrMdEmp.nombre, \'\')) else \'\' end as mtrl_nombreUserMod')
                            ->from('MinsalSimagdBundle:ImgCtlMaterial', 'mtrl')
                            ->innerJoin('mtrl.idSubgrupoMaterial', 'sgm')
                            ->innerJoin('sgm.idGrupoMaterial', 'gm')
                            ->innerJoin('mtrl.idUserReg', 'usrRg')
                            ->leftJoin('mtrl.idUserMod', 'usrMd')
                            ->innerJoin('usrRg.idEmpleado', 'usrRgEmp')
                            ->leftJoin('usrMd.idEmpleado', 'usrMdEmp')
                            ->orderBy('mtrl.id', 'desc')
                            ->distinct();

        /*
         * --| add filters from BSTABLE_FILTER to query
         */
        $simagd_er_model    = $this->getEntityManager()->getRepository('MinsalSimagdBundle:ImgSolicitudEstudio');
        $apply_filters      = $simagd_er_model->getBsTableFiltersV2($query, $bs_filters);
        if ($apply_filters !== false)
        {
            $query->andWhere($apply_filters);
        }
        /*
         * |-- END filters from BSTABLE_FILTER to query
         */
        // $query->setMaxResults(10);

        return $query->getQuery()->getScalarResult();
    }

    public function obtenerMaterialesLocalesV2($id_estab, $bs_filters = array())
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder('mtrLc')
                            ->select('mtrLc')
                            ->addSelect('mtrl')

                            ->addSelect('mtrLc.id as id, mtrl.nombre as nombre, mtrl.codigo as codigo, sgm.nombre as subgrupo, sgm.codigo as codigo_subgrupo, gm.nombre as grupo, gm.codigo as codigo_grupo, mtrl.descripcion as descripcion, mtrl.fechaHoraReg as fecha_registro, mtrl.fechaHoraMod as fecha_edicion, mtrLc.habilitado as habilitado, mtrLc.fechaHoraReg as fecha_registro_local, mtrLc.fechaHoraMod as fecha_edicion_local')

                            ->addSelect('stdmtrl.nombre as mtrLc_establecimiento, stdmtrl.id as mtrLc_id_establecimiento')
                            ->addSelect('usrRg.username as mtrLc_usernameUserReg, usrRg.id as mtrLc_id_userReg, usrMd.username as mtrLc_usernameUserMod, usrMd.id as mtrLc_id_userMod, usrRgMtrl.username as mtrl_usernameUserReg, usrRgMtrl.id as mtrl_id_userReg')
                            ->addSelect('concat(coalesce(usrRgEmp.apellido, \'\'), \', \', coalesce(usrRgEmp.nombre, \'\')) as mtrLc_nombreUserReg')
                            ->addSelect('case when (usrMd.username is not null) then concat(coalesce(usrMdEmp.apellido, \'\'), \', \', coalesce(usrMdEmp.nombre, \'\')) else \'\' end as mtrLc_nombreUserMod')
                            ->addSelect('concat(coalesce(usrRgMtrlEmp.apellido, \'\'), \', \', coalesce(usrRgMtrlEmp.nombre, \'\')) as mtrl_nombreUserReg')
                            ->from('MinsalSimagdBundle:ImgCtlMaterialEstablecimiento', 'mtrLc')
                            ->innerJoin('mtrLc.idMaterial', 'mtrl')
                            ->innerJoin('mtrl.idSubgrupoMaterial', 'sgm')
                            ->innerJoin('sgm.idGrupoMaterial', 'gm')
                            ->innerJoin('mtrLc.idEstablecimiento', 'stdmtrl')
                            ->innerJoin('mtrLc.idUserReg', 'usrRg')
                            ->leftJoin('mtrLc.idUserMod', 'usrMd')
                            ->innerJoin('mtrl.idUserReg', 'usrRgMtrl')
                            ->innerJoin('usrRg.idEmpleado', 'usrRgEmp')
                            ->leftJoin('usrMd.idEmpleado', 'usrMdEmp')
                            ->innerJoin('usrRgMtrl.idEmpleado', 'usrRgMtrlEmp')
                            ->where('mtrLc.idEstablecimiento = :id_est')
                            ->setParameter('id_est', $id_estab)
                            ->orderBy('mtrLc.id', 'desc')
                            ->distinct();

        /*
         * --| add filters from BSTABLE_FILTER to query
         */
        $simagd_er_model    = $this->getEntityManager()->getRepository('MinsalSimagdBundle:ImgSolicitudEstudio');
        $apply_filters      = $simagd_er_model->getBsTableFiltersV2($query, $bs_filters);
        if ($apply_filters !== false)
        {
            $query->andWhere($apply_filters);
        }
        /*
         * |-- END filters from BSTABLE_FILTER to query
         */

        return $query->getQuery()->getScalarResult();
    }

    public function obtenerMaterialesScalarV2($return = 'scalar')
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder('mtrl')
                            ->select('mtrl')
                            ->from('MinsalSimagdBundle:ImgCtlMaterial', 'mtrl')
                            ->orderBy('mtrl.id', 'desc')
                            ->distinct();

	if($return == 'scalar')
	{
	    $query->addSelect('mtrl.id as id, mtrl.nombre as text, mtrl.codigo as cod');
	}

        return $return == 'query' ?
	    $query : ($return == 'scalar' ? $query->getQuery()->getScalarResult()
		: $query->getQuery()->getResult()
	    );
    }

}
