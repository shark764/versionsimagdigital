<?php

namespace Minsal\SimagdBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * RyxCtlMaterialRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RyxCtlMaterialRepository extends EntityRepository
{
    public function getNonAggregatedMaterials($id_estab, $bs_filters = array())
    {
        /** SubQuery */
        $subQuery = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('mtrLc')
                            ->from('MinsalSimagdBundle:ImgCtlMaterialEstablecimiento', 'mtrLc')
                            ->where('mtrl.id = mtrLc.idMaterial')
                            ->andWhere('mtrLc.idEstablecimiento = :id_est');

        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('mtrl')
                            ->from('MinsalSimagdBundle:ImgCtlMaterial', 'mtrl');

        $query->andWhere($query->expr()->not($query->expr()->exists($subQuery->getDql())))
                            ->setParameter('id_est', $id_estab);

        $query->orderBy('mtrl.nombre');

        $query->distinct();

        return $query->getQuery()->getScalarResult();
    }

    public function getUsableMaterials($id_estab, $bs_filters = array())
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('mtrl')
                            ->from('MinsalSimagdBundle:ImgCtlMaterial', 'mtrl')
                            ->innerJoin('MinsalSimagdBundle:ImgCtlMaterialEstablecimiento', 'mtrLc',
                                    \Doctrine\ORM\Query\Expr\Join::WITH,
                                    'mtrl.id = mtrLc.idMaterial')
                            ->where('mtrLc.idEstablecimiento = :id_est')
                            ->setParameter('id_est', $id_estab)
			    ->andWhere('mtrLc.habilitado = TRUE')
			    ->andWhere('mtrLc.cantidadDisponible > 0');

        $query->distinct();

        return $query;
    }

    public function data($bs_filters = array())
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder('mtrl')
                            ->select('mtrl')

                            ->addSelect('mtrl.id AS id, mtrl.nombre AS nombre, mtrl.codigo AS codigo, sgm.nombre AS subgrupo, sgm.codigo AS codigo_subgrupo, gm.nombre AS grupo, gm.codigo AS codigo_grupo, mtrl.descripcion as descripcion, mtrl.fechaHoraReg AS fecha_registro, mtrl.fechaHoraMod AS fecha_edicion')

                            ->addSelect('usrRg.username AS mtrl_usernameUserReg, usrRg.id AS mtrl_id_userReg, usrMd.username AS mtrl_usernameUserMod, usrMd.id AS mtrl_id_userMod')
                            ->addSelect('CONCAT(COALESCE(usrRgEmp.apellido, \'\'), \', \', COALESCE(usrRgEmp.nombre, \'\')) AS mtrl_nombreUserReg')
                            ->addSelect('CASE WHEN (usrMd.username IS NOT NULL) THEN CONCAT(COALESCE(usrMdEmp.apellido, \'\'), \', \', COALESCE(usrMdEmp.nombre, \'\')) ELSE \'\' END AS mtrl_nombreUserMod')
                            ->from('MinsalSimagdBundle:ImgCtlMaterial', 'mtrl')
                            ->innerJoin('mtrl.idSubgrupoMaterial', 'sgm')
                            ->innerJoin('sgm.idGrupoMaterial', 'gm')
                            ->innerJoin('mtrl.idUserReg', 'usrRg')
                            ->leftJoin('mtrl.idUserMod', 'usrMd')
                            ->innerJoin('usrRg.idEmpleado', 'usrRgEmp')
                            ->leftJoin('usrMd.idEmpleado', 'usrMdEmp')
                            ->orderBy('mtrl.id', 'DESC')
                            ->distinct();

        /*
         * --| add filters from BSTABLE_FILTER to query
         */
        $simagd_er_model    = $this->getEntityManager()->getRepository('MinsalSimagdBundle:ImgSolicitudEstudio');
        $apply_filters      = $simagd_er_model->getBsTableFiltersV2($query, $bs_filters);
        if ($apply_filters !== false)
        {
            $query->andWhere($apply_filters);
        }
        /*
         * |-- END filters from BSTABLE_FILTER to query
         */
        // $query->setMaxResults(10);

        return $query->getQuery()->getScalarResult();
    }

    public function localData($id_estab, $bs_filters = array())
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder('mtrLc')
                            ->select('mtrLc')
                            ->addSelect('mtrl')

                            ->addSelect('mtrLc.id AS id, mtrl.nombre AS nombre, mtrl.codigo AS codigo, sgm.nombre AS subgrupo, sgm.codigo AS codigo_subgrupo, gm.nombre AS grupo, gm.codigo AS codigo_grupo, mtrl.descripcion as descripcion, mtrl.fechaHoraReg AS fecha_registro, mtrl.fechaHoraMod AS fecha_edicion, mtrLc.habilitado AS habilitado, mtrLc.fechaHoraReg AS fecha_registro_local, mtrLc.fechaHoraMod AS fecha_edicion_local')

                            ->addSelect('stdmtrl.nombre AS mtrLc_establecimiento, stdmtrl.id AS mtrLc_id_establecimiento')
                            ->addSelect('usrRg.username AS mtrLc_usernameUserReg, usrRg.id AS mtrLc_id_userReg, usrMd.username AS mtrLc_usernameUserMod, usrMd.id AS mtrLc_id_userMod, usrRgMtrl.username AS mtrl_usernameUserReg, usrRgMtrl.id AS mtrl_id_userReg')
                            ->addSelect('CONCAT(COALESCE(usrRgEmp.apellido, \'\'), \', \', COALESCE(usrRgEmp.nombre, \'\')) AS mtrLc_nombreUserReg')
                            ->addSelect('CASE WHEN (usrMd.username IS NOT NULL) THEN CONCAT(COALESCE(usrMdEmp.apellido, \'\'), \', \', COALESCE(usrMdEmp.nombre, \'\')) ELSE \'\' END AS mtrLc_nombreUserMod')
                            ->addSelect('CONCAT(COALESCE(usrRgMtrlEmp.apellido, \'\'), \', \', COALESCE(usrRgMtrlEmp.nombre, \'\')) AS mtrl_nombreUserReg')
                            ->from('MinsalSimagdBundle:ImgCtlMaterialEstablecimiento', 'mtrLc')
                            ->innerJoin('mtrLc.idMaterial', 'mtrl')
                            ->innerJoin('mtrl.idSubgrupoMaterial', 'sgm')
                            ->innerJoin('sgm.idGrupoMaterial', 'gm')
                            ->innerJoin('mtrLc.idEstablecimiento', 'stdmtrl')
                            ->innerJoin('mtrLc.idUserReg', 'usrRg')
                            ->leftJoin('mtrLc.idUserMod', 'usrMd')
                            ->innerJoin('mtrl.idUserReg', 'usrRgMtrl')
                            ->innerJoin('usrRg.idEmpleado', 'usrRgEmp')
                            ->leftJoin('usrMd.idEmpleado', 'usrMdEmp')
                            ->innerJoin('usrRgMtrl.idEmpleado', 'usrRgMtrlEmp')
                            ->where('mtrLc.idEstablecimiento = :id_est')
                            ->setParameter('id_est', $id_estab)
                            ->orderBy('mtrLc.id', 'DESC')
                            ->distinct();

        /*
         * --| add filters from BSTABLE_FILTER to query
         */
        $simagd_er_model    = $this->getEntityManager()->getRepository('MinsalSimagdBundle:ImgSolicitudEstudio');
        $apply_filters      = $simagd_er_model->getBsTableFiltersV2($query, $bs_filters);
        if ($apply_filters !== false)
        {
            $query->andWhere($apply_filters);
        }
        /*
         * |-- END filters from BSTABLE_FILTER to query
         */

        return $query->getQuery()->getScalarResult();
    }

    public function scalarData($return = 'scalar')
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder('mtrl')
                            ->select('mtrl')
                            ->from('MinsalSimagdBundle:ImgCtlMaterial', 'mtrl')
                            ->orderBy('mtrl.id', 'DESC')
                            ->distinct();

		if($return == 'scalar')
		{
		    $query->addSelect('mtrl.id AS id, mtrl.nombre AS text, mtrl.codigo AS cod');
		}

        return $return == 'query' ?
	    $query : ($return == 'scalar' ? $query->getQuery()->getScalarResult()
		: $query->getQuery()->getResult()
	    );
    }

}