<?php

namespace Minsal\SimagdBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * BloqueoAgendaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BloqueoAgendaRepository extends EntityRepository
{
    public function obtenerBloqueosAgendaCalendario($id_estab, $start, $end, $idAreaServicioDiagnostico = null, $idTecnologo = null )
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder('blAgd')
                            ->select('blAgd')
                            ->addSelect('concat(\'bl_\', blAgd.id) as id, blAgd.diaCompleto as allDay, blAgd.color as color, blAgd.descripcion as description, \'background\' as rendering, blAgd.titulo as title')
//                            ->addSelect('concat(\'bl_\', blAgd.id) as id, blAgd.diaCompleto as allDay, blAgd.color as color, blAgd.descripcion as description, \'background\' as rendering, concat(blAgd.titulo, \' (\', blAgd.fechaInicio, \' a \', blAgd.fechaFin, \', \', blAgd.horaInicio, \' a \', blAgd.horaFin, \') \') as title')
                            ->addSelect('concat(coalesce(empblAgd.apellido, \'\'), \', \', coalesce(empblAgd.nombre, \'\')) as blAgd_empleado, empblAgd.id as blAgd_id_empleado, tpEmp.tipo as blAgd_tipoEmpleado')
                            ->addSelect('stdblAgd.nombre as blAgd_establecimiento, stdblAgd.id as blAgd_id_establecimiento, m.nombrearea as blAgd_modalidad, m.id as blAgd_id_area_servicio_diagnostico')
                            ->addSelect('usrRg.username as blAgd_usernameUserReg, usrRg.id as blAgd_id_userReg, usrMd.username as blAgd_usernameUserMod, usrMd.id as blAgd_id_userMod')
                            ->addSelect('concat(coalesce(usrRgEmp.apellido, \'\'), \', \', coalesce(usrRgEmp.nombre, \'\')) as blAgd_nombreUserReg')
                            ->addSelect('case when (usrMd.username is not null) then concat(coalesce(usrMdEmp.apellido, \'\'), \', \', coalesce(usrMdEmp.nombre, \'\')) else \'\' end as blAgd_nombreUserMod')
                            ->addSelect('case when (radx.id is not null) then concat(coalesce(radx.apellido, \'\'), \', \', coalesce(radx.nombre, \'\')) else \'\' end as blAgd_radiologo, radx.id as blAgd_id_radiologo')
                            ->from('MinsalSimagdBundle:ImgBloqueoAgenda', 'blAgd')
                            ->innerJoin('blAgd.idEmpleadoRegistra', 'empblAgd')
                            ->innerJoin('blAgd.idEstablecimiento', 'stdblAgd')
                            ->leftJoin('blAgd.idRadiologoBloqueo', 'radx')
                            ->innerJoin('blAgd.idUserReg', 'usrRg')
                            ->leftJoin('blAgd.idUserMod', 'usrMd')
                            ->leftJoin('blAgd.idAreaServicioDiagnostico', 'm')
                            ->leftJoin('usrRg.idEmpleado', 'usrRgEmp')
                            ->leftJoin('usrMd.idEmpleado', 'usrMdEmp')
                            ->leftJoin('empblAgd.idTipoEmpleado', 'tpEmp')
                            ->where('blAgd.idEstablecimiento = :id_est')
                            ->setParameter('id_est', $id_estab);
        
        if ($start && $end)
        {
            $query->andWhere('blAgd.fechaInicio >= :cal_start_date')
                            ->andWhere('blAgd.fechaFin <= :cal_end_date')
                            ->setParameter('cal_start_date', \DateTime::createFromFormat('Y-m-d', $start)->setTime(0, 0))
                            ->setParameter('cal_end_date', \DateTime::createFromFormat('Y-m-d', $end)->setTime(0, 0));
        }
        
        $query->andWhere($query->expr()->orx(
                                $query->expr()->eq('blAgd.idAreaServicioDiagnostico', ':id_mod'),
                                $query->expr()->isNull('blAgd.idAreaServicioDiagnostico')
                            ))
                            ->setParameter('id_mod', $idAreaServicioDiagnostico);
        
        $query->andWhere($query->expr()->orx(
                                $query->expr()->eq('blAgd.idRadiologoBloqueo', ':id_tcnl'),
                                $query->expr()->isNull('blAgd.idRadiologoBloqueo')
                            ))
                            ->setParameter('id_tcnl', $idTecnologo)
                            ->orderBy('blAgd.id', 'desc')
                            ->distinct();
        
        return $query->getQuery()->getScalarResult();
    }
    
    public function obtenerBloqueosAgendaV2($id_estab, $bs_filters = array())
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder('blAgd')
                            ->select('blAgd')
                            ->addSelect('concat(coalesce(empblAgd.apellido, \'\'), \', \', coalesce(empblAgd.nombre, \'\')) as blAgd_empleado, empblAgd.id as blAgd_id_empleado, tpEmp.tipo as blAgd_tipoEmpleado')
                            ->addSelect('stdblAgd.nombre as blAgd_establecimiento, stdblAgd.id as blAgd_id_establecimiento, m.nombrearea as blAgd_modalidad, m.id as blAgd_id_area_servicio_diagnostico')
                            ->addSelect('usrRg.username as blAgd_usernameUserReg, usrRg.id as blAgd_id_userReg, usrMd.username as blAgd_usernameUserMod, usrMd.id as blAgd_id_userMod')
                            ->addSelect('concat(coalesce(usrRgEmp.apellido, \'\'), \', \', coalesce(usrRgEmp.nombre, \'\')) as blAgd_nombreUserReg')
                            ->addSelect('case when (usrMd.username is not null) then concat(coalesce(usrMdEmp.apellido, \'\'), \', \', coalesce(usrMdEmp.nombre, \'\')) else \'\' end as blAgd_nombreUserMod')
                            ->addSelect('case when (radx.id is not null) then concat(coalesce(radx.apellido, \'\'), \', \', coalesce(radx.nombre, \'\')) else \'\' end as blAgd_radiologo, radx.id as blAgd_id_radiologo')
                            ->from('MinsalSimagdBundle:ImgBloqueoAgenda', 'blAgd')
                            ->innerJoin('blAgd.idEmpleadoRegistra', 'empblAgd')
                            ->leftJoin('blAgd.idRadiologoBloqueo', 'radx')
                            ->innerJoin('blAgd.idEstablecimiento', 'stdblAgd')
                            ->innerJoin('blAgd.idUserReg', 'usrRg')
                            ->leftJoin('blAgd.idUserMod', 'usrMd')
                            ->leftJoin('blAgd.idAreaServicioDiagnostico', 'm')
                            ->leftJoin('usrRg.idEmpleado', 'usrRgEmp')
                            ->leftJoin('usrMd.idEmpleado', 'usrMdEmp')
                            ->leftJoin('empblAgd.idTipoEmpleado', 'tpEmp')
                            ->where('blAgd.idEstablecimiento = :id_est')
                            ->setParameter('id_est', $id_estab);
        
        $query->orderBy('blAgd.id', 'desc')
                            ->distinct();
        
        /*
         * --| add filters from BSTABLE_FILTER to query
         */
        $simagd_er_model    = $this->getEntityManager()->getRepository('MinsalSimagdBundle:ImgSolicitudEstudio');
        $apply_filters      = $simagd_er_model->getBsTableFiltersV2($query, $bs_filters);
        if ($apply_filters !== false)
        {
            $query->andWhere($apply_filters);
        }
        /*
         * |-- END filters from BSTABLE_FILTER to query
         */
        
        return $query->getQuery()->getScalarResult();
    }
    
    public function obtenerExclusionesBloqueo($id_blAgd)
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder('exclBlAgd')
                            ->select('exclBlAgd')
                            ->addSelect('IDENTITY(exclBlAgd.idRadiologoExcluido) as exclBlAgd_id_radiologo')
                            ->from('MinsalSimagdBundle:ImgExclusionBloqueo', 'exclBlAgd')
                            ->where('exclBlAgd.idBloqueoAgenda = :id_blAgd')
                            ->setParameter('id_blAgd', $id_blAgd)
                            ->orderBy('exclBlAgd.idRadiologoExcluido', 'asc')
                            ->distinct();

        return $query->getQuery()->getScalarResult();
    }
}