<?php

namespace Minsal\SimagdBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * SolicitudEstudioRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SolicitudEstudioRepository extends EntityRepository
{
    public function obtenerPreinscripcionesEstabPorPaciente($idExpediente, $id_estab)
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('prc')
                            ->from('MinsalSimagdBundle:ImgSolicitudEstudio', 'prc')
                            ->innerJoin('prc.idAtenAreaModEstab', 'aams')
                            ->where('prc.idExpediente = :id_exp')
                            ->setParameter('id_exp', $idExpediente)
                            ->andWhere('aams.idEstablecimiento = :id_est')
                            ->setParameter('id_est', $id_estab)
                            ->orderBy('prc.fechaCreacion', 'desc');
        $query->distinct();
        
        return $query->getQuery()->getResult();
    }
    
    public function obtenerAreasAtencion($id_estab, $bs_filters = array())
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('ar')
                            ->from('MinsalSiapsBundle:CtlAreaAtencion', 'ar')
                            ->innerJoin('MinsalSiapsBundle:MntAreaModEstab', 'ams',
                                    \Doctrine\ORM\Query\Expr\Join::WITH,
                                    'ar.id = ams.idAreaAtencion')
                            ->where('ams.idEstablecimiento = :id_est')
                            ->setParameter('id_est', $id_estab)
                            ->orderBy('ar.nombre');
        $query->distinct();
        
        return $query->getQuery()->getResult();
    }
    
    public function obtenerAtenciones($id_estab, $idAreaAtencion)
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('atn')
                            ->from('MinsalSiapsBundle:CtlAtencion', 'atn')
                            ->innerJoin('MinsalSiapsBundle:MntAtenAreaModEstab', 'aams',
                                    \Doctrine\ORM\Query\Expr\Join::WITH,
                                    'atn.id = aams.idAtencion')
                            ->innerJoin('aams.idAreaModEstab', 'ams')
                            ->where('aams.idEstablecimiento = :id_est')
                            ->setParameter('id_est', $id_estab)
                            ->andWhere('ams.idAreaAtencion = :id_ar_atn')
                            ->setParameter('id_ar_atn', $idAreaAtencion)
                            ->orderBy('atn.nombre');
        $query->distinct();
        
        return $query->getQuery()->getResult();
    }
    
    public function obtenerEmpleados($id_estab, $idAtencion, $idAreaAtencion = '-1')
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('emp')
                            ->from('MinsalSiapsBundle:MntEmpleado', 'emp')
                            ->innerJoin('MinsalSiapsBundle:MntEmpleadoEspecialidadEstab', 'ees',
                                    \Doctrine\ORM\Query\Expr\Join::WITH,
                                    'emp.id = ees.idEmpleado')
                            ->innerJoin('ees.idAtenAreaModEstab', 'aams')
                            ->innerJoin('aams.idAreaModEstab', 'ams')
                            ->where('aams.idEstablecimiento = :id_est')
                            ->setParameter('id_est', $id_estab)
                            ->andWhere('ams.idAreaAtencion = :id_ar_atn')
                            ->setParameter('id_ar_atn', $idAreaAtencion)
                            ->andWhere('aams.idAtencion = :id_atn')
                            ->setParameter('id_atn', $idAtencion)
                            ->andWhere('emp.idTipoEmpleado IN (1, 2, 4)')//REVISAR COINCIDENCIAS ENTRE DEFAULT, Y AJAX PARA TODOS LOS CASOS.... EJ: IN()
                            ->orderBy('emp.idTipoEmpleado')
                            ->addOrderBy('emp.apellido')
                            ->addOrderBy('emp.nombre');
        $query->distinct();
        
        return $query->getQuery()->getResult();
    }
    
    public function obtenerAtencionAreaEstab($id_estab, $idAreaAtencion, $idAtencion)
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('aams')
                            ->from('MinsalSiapsBundle:MntAtenAreaModEstab', 'aams')
                            ->innerJoin('aams.idAreaModEstab', 'ams')
                            ->where('aams.idEstablecimiento = :id_est')
                            ->setParameter('id_est', $id_estab)
                            ->andWhere('ams.idAreaAtencion = :id_ar_atn')
                            ->setParameter('id_ar_atn', $idAreaAtencion)
                            ->andWhere('aams.idAtencion = :id_atn')
                            ->setParameter('id_atn', $idAtencion)
                            ->orderBy('aams.idAreaModEstab')
                            ->addOrderBy('aams.id');
        $query->distinct();
        $query->setMaxResults(1);
        
        return $query->getQuery()->getOneOrNullResult();
    }
    
    public function obtenerPacientes($id_estab, $numeroExp, $criteria, $fechaNacimiento, $dui, $limiteResultados)
    {
        /** Ningún parámetro fué enviado */
        if(count($criteria) < 1 && !$numeroExp && !$fechaNacimiento && !$dui) {
            $limiteResultados = 0;
        }
        
        /** Consulta de pacientes */
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('exp', 'pct')
                            ->from('MinsalSiapsBundle:MntExpediente', 'exp')
                            ->innerJoin('exp.idPaciente', 'pct')
                            ->where('exp.idEstablecimiento = :id_est')
                            ->setParameter('id_est', $id_estab)
                            ->orderBy('exp.numero')
                            ->addOrderBy('pct.primerApellido')
                            ->addOrderBy('pct.primerNombre');
        
        /** Número de expediente enviado */
        if($numeroExp) {
            $query->andWhere($query->expr()->like('LOWER(exp.numero)', ':num_exp'))
                            ->setParameter('num_exp', '%' . strtolower($numeroExp) . '%');
        }
        
        /** Número de identificación */
        if($dui) {
            $query->andWhere('pct.numeroDocIdePaciente = :dui')
                            ->setParameter('dui', $dui);
        }
        
        /** Fecha de nacimiento */
        if($fechaNacimiento) {
            $query->andWhere('pct.fechaNacimiento = :fechaNacimiento')
                            ->setParameter('fechaNacimiento', $fechaNacimiento);
        }
        
        /** Coincidencias en campos de texto */
        if(count($criteria) > 0) {
            $andX = $query->expr()->andX();

            foreach($criteria as $key => $value) {
                $andX->add($query->expr()->like('LOWER(pct.' . $key . ')', ':' . $key));                
                $query->setParameter($key, '%' . strtolower($value) . '%');
            }
            $query->andWhere($andX);
        }
        
        $query->distinct();
        $query->setMaxResults($limiteResultados);
        
        return $query->getQuery()->getResult();
    }
    
    public function existeRegistroPorId($id, $entity = null, $cod = null)
    {
        if (!($entity && $cod)) { return false; }

        /** Diagnóstico registrado */
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select($cod . '.id as regId')
                            ->from('MinsalSimagdBundle:' . $entity, $cod)
                            ->where($cod . '.id = :id_reg')
                            ->setParameter('id_reg', $id);

        $query->distinct();
        $query->setMaxResults(1);
        
        return $query->getQuery()->getOneOrNullResult() ? true : false;
    }
    
    public function obtenerAccesoEstab($id, $idEstab)
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('prc.id as prcId')
                            ->from('MinsalSimagdBundle:ImgSolicitudEstudio', 'prc')
                            ->innerJoin('prc.idAtenAreaModEstab', 'aams')
                            ->where('prc.id = :id_prc')
                            ->setParameter('id_prc', $id);

        $query->andWhere($query->expr()->orx(
                            $query->expr()->eq('prc.idEstablecimientoReferido', ':id_est_ref'),
                            $query->expr()->eq('prc.idEstablecimientoDiagnosticante', ':id_est_diag'),
                            $query->expr()->eq('aams.idEstablecimiento', ':id_est')
                        ))
                            ->setParameter('id_est_ref', $idEstab)
                            ->setParameter('id_est_diag', $idEstab)
                            ->setParameter('id_est', $idEstab);

        $query->distinct();
        $query->setMaxResults(1);
        
        return $query->getQuery()->getOneOrNullResult() ? true : false;
    }
    
    public function obtenerAccesoEstabEdit($id, $idEstab, $alias = 'aams', $estabUsed = 'idEstablecimiento')
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('prc.id as prcId')
                            ->from('MinsalSimagdBundle:ImgSolicitudEstudio', 'prc')
                            ->innerJoin('prc.idAtenAreaModEstab', 'aams')
                            ->where('prc.id = :id_prc')
                            ->setParameter('id_prc', $id)
                            ->andWhere($alias . '.' . $estabUsed . ' = :id_est')
                            ->setParameter('id_est', $idEstab);

        $query->distinct();
        $query->setMaxResults(1);
        
        return $query->getQuery()->getOneOrNullResult() ? true : false;
    }
    
    public function obtenerAccesoPreinscripcion($id, $idUser)
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('prc.id as prcId')
                            ->from('MinsalSimagdBundle:ImgSolicitudEstudio', 'prc')
                            ->where('prc.id = :id_prc')
                            ->setParameter('id_prc', $id);

        $query->andWhere($query->expr()->orx(
                            $query->expr()->eq('prc.idUserReg', ':id_user_prc_reg'),
                            $query->expr()->eq('prc.idUserMod', ':id_user_prc_mod')
                        ))
                            ->setParameter('id_user_prc_reg', $idUser)
                            ->setParameter('id_user_prc_mod', $idUser);

        $query->distinct();
        $query->setMaxResults(1);
        
        return $query->getQuery()->getOneOrNullResult() ? true : false;
    }
    
    public function existeRegistroPorPreinscripcion($idPrc = '-1', $alias = 'cit', $entity = 'ImgCita') //acepta soldiag, prz y prc
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select($alias . '.id as regId')
                            ->from('MinsalSimagdBundle:' . $entity, $alias)
                            ->where($alias . '.idSolicitudEstudio = :id_prc')
                            ->setParameter('id_prc', $idPrc);

        $query->distinct();
        $query->setMaxResults(1);
        
        return $query->getQuery()->getOneOrNullResult() ? true : false;
    }
    
    public function existeLecturaPorPreinscripcion($idPrc = '-1')
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('lct.id as lctId')
                            ->from('MinsalSimagdBundle:ImgLectura', 'lct')
                            ->innerJoin('lct.idEstudio', 'est')
                            ->innerJoin('est.idProcedimientoRealizado', 'prz')
                            ->where('prz.idSolicitudEstudio = :id_prc')
                            ->setParameter('id_prc', $idPrc);

        $query->distinct();
        $query->setMaxResults(1);
        
        return $query->getQuery()->getOneOrNullResult() ? true : false;
    }
    
    public function estudioPreinscritoFueAlmacenado($idPrc = '-1')
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('est.id as estId')
                            ->from('MinsalSimagdBundle:ImgEstudioPaciente', 'est')
                            ->innerJoin('est.idProcedimientoRealizado', 'prz')
                            ->where('prz.idSolicitudEstudio = :id_prc')
                            ->setParameter('id_prc', $idPrc)
                            ->andWhere('prz.idEstadoProcedimientoRealizado IN (5, 6, 7, 8, 9)');

        $query->distinct();
        $query->setMaxResults(1);
        
        return $query->getQuery()->getOneOrNullResult() ? true : false;
    }
    
    public function bloquearTrasladoPaciente($idPrc = '-1')
    {
        return ($this->existeRegistroPorPreinscripcion($idPrc) || $this->existeRegistroPorPreinscripcion($idPrc, 'prz', 'ImgProcedimientoRealizado'));
    }
    
    public function bloquearEstudioSolicitado($idPrc = '-1')
    {
        return ($this->existeRegistroPorPreinscripcion($idPrc) || $this->existeRegistroPorPreinscripcion($idPrc, 'prz', 'ImgProcedimientoRealizado'));
    }
    
    public function existePreinscripcionPorModalidadPendiente($idAreaServicioDiagnostico, $idPaciente)
    {
        /** SubQuery */
        $subQuery = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('prz')
                            ->from('MinsalSimagdBundle:ImgProcedimientoRealizado', 'prz')
                            ->where('prc.id = prz.idSolicitudEstudio');
                
        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('prc.id as prcId')
                            ->from('MinsalSimagdBundle:ImgSolicitudEstudio', 'prc')
                            ->innerJoin('prc.idExpediente', 'exp')
                            ->where('prc.idAreaServicioDiagnostico = :id_mod')
                            ->setParameter('id_mod', $idAreaServicioDiagnostico)
                            ->andWhere('exp.idPaciente = :id_pct')
                            ->setParameter('id_pct', $idPaciente);

        $query->andWhere($query->expr()->not($query->expr()->exists($subQuery->getDql())));

        $query->distinct();
        $query->setMaxResults(1);
        
        return $query->getQuery()->getOneOrNullResult() ? true : false;
    }
    
    public function existePreinscripcionPorHistoriaClinica($idAreaServicioDiagnostico, $idHistoriaClinica)
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('prc.id as prcId')
                            ->from('MinsalSimagdBundle:ImgSolicitudEstudio', 'prc')
                            ->innerJoin('prc.idSolicitudestudios', 'solest')
                            ->where('prc.idAreaServicioDiagnostico = :id_mod')
                            ->setParameter('id_mod', $idAreaServicioDiagnostico)
                            ->andWhere('solest.idHistorialClinico = :id_hcl')
                            ->setParameter('id_hcl', $idHistoriaClinica);

        $query->distinct();
        $query->setMaxResults(1);
        
        return $query->getQuery()->getOneOrNullResult() ? true : false;
    }
    
    public function obtenerInformacionContactoReciente($idPaciente)
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('prc.id as prcId, IDENTITY(prc.idContactoPaciente) as idCtPct, prc.nombreContacto as nmCt, IDENTITY(prc.idFormaContacto) as idFrmCt, prc.contacto as cnt')
                            ->from('MinsalSimagdBundle:ImgSolicitudEstudio', 'prc')
                            ->innerJoin('prc.idExpediente', 'exp')
                            ->where('exp.idPaciente = :id_pct')
                            ->setParameter('id_pct', $idPaciente)
                            ->orderBy('prc.id', 'desc');

        $query->andWhere($query->expr()->andx(
                            $query->expr()->isNotNull('prc.idContactoPaciente'),
                            $query->expr()->isNotNull('prc.idFormaContacto')
                        ));

        $query->distinct();
        $query->setMaxResults(1);
        
        return $query->getQuery()->getOneOrNullResult();
    }
//     http://stackoverflow.com/questions/19185587/left-join-on-condition-and-other-condition-syntax-in-doctrine
    public function obtenerPreinscripcionesNoCitadas($id_estab, $idModl = null, $numeroExp = null)
    {
        /** SubQuery */
        $subQuery = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('cit')
                            ->from('MinsalSimagdBundle:ImgCita', 'cit')
                            ->where('prc.id = cit.idSolicitudEstudio');
                
        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('prc')
                            ->from('MinsalSimagdBundle:ImgSolicitudEstudio', 'prc')
                            ->innerJoin('prc.idExpediente', 'exp')
                            ->where('prc.idEstablecimientoReferido = :id_std_ref')
                            ->setParameter('id_std_ref', $id_estab)
                            ->andWhere('prc.requiereCita = TRUE');

        /** Modalidad enviada */
        if ($idModl) {
            $query->andWhere('prc.idAreaServicioDiagnostico = :id_mod')
                            ->setParameter('id_mod', $idModl);
        }
        
        /** Número de expediente enviado */
        if($numeroExp) {
            $query->andWhere($query->expr()->like('LOWER(exp.numero)', ':num_exp'))
                            ->setParameter('num_exp', '%' . strtolower($numeroExp) . '%');
        }

        $query->andWhere($query->expr()->not($query->expr()->exists($subQuery->getDql())));
        
        $query->orderBy('prc.id', 'desc');
                
        $query->distinct();
        
        return $query->getQuery()->getResult();
    }
    
    public function obtenerSolicitudesEstudio($id_estab, $bs_filters = array())
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('prc')
                            ->from('MinsalSimagdBundle:ImgSolicitudEstudio', 'prc');
        
        $query->innerJoin('prc.idAtenAreaModEstab', 'aams')
                            ->andWhere($query->expr()->orx(
                                $query->expr()->eq('prc.idEstablecimientoReferido', ':id_est_ref'),
                                $query->expr()->eq('prc.idEstablecimientoDiagnosticante', ':id_est_diag'),
                                $query->expr()->eq('aams.idEstablecimiento', ':id_est')
                            ))
                            ->setParameter('id_est_ref', $id_estab)
                            ->setParameter('id_est_diag', $id_estab)
                            ->setParameter('id_est', $id_estab);
        
        $query->orderBy('prc.id', 'desc');
                
        $query->distinct();
        
        return $query->getQuery()->getResult();
    }
    
    public function obtenerSolicitudesEstudioV2($id_estab, $bs_filters = array())
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder('prc')
                            ->select('prc')
                            ->addSelect('statusSc')
                            ->addSelect('explocal')
                            ->addSelect('unknExp')
                            ->addSelect('prAtn')

                            ->addSelect('prc.id as id, stdroot.nombre as origen, concat(pct.primerApellido, \' \', coalesce(pct.segundoApellido, \'\'), \', \', pct.primerNombre, \' \', coalesce(pct.segundoNombre, \'\')) as paciente, explocal.numero as numero_expediente, case when (empprc.id is not null) then concat(coalesce(empprc.apellido, \'\'), \', \', coalesce(empprc.nombre, \'\')) else \'\' end as medico, ar.nombre as area_atencion, atn.nombre as atencion, m.nombrearea as modalidad, prAtn.nombre as triage, prc.fechaCreacion as fecha_solicitud')

                            ->addSelect('concat(pct.primerApellido, \' \', coalesce(pct.segundoApellido, \'\'), \', \', pct.primerNombre, \' \', coalesce(pct.segundoNombre, \'\')) as prc_paciente')
                            ->addSelect('stdroot.nombre as prc_origen, stdroot.id as prc_id_origen, ar.nombre as prc_areaAtencion, ar.id as prc_id_areaAtencion, atn.nombre as prc_atencion, atn.id as prc_id_atencion')
                            ->addSelect('concat(coalesce(empprc.apellido, \'\'), \', \', coalesce(empprc.nombre, \'\')) as prc_empleado, empprc.id as prc_id_empleado, tpEmp.tipo as prc_tipoEmpleado')
                            ->addSelect('stdref.nombre as prc_referido, stdref.id as prc_id_referido, stdiag.nombre as prc_diagnosticante, stdiag.id as prc_id_diagnosticante')
                            ->addSelect('m.nombrearea as prc_modalidad, m.id as prc_id_modalidad, prAtn.nombre as prc_prioridadAtencion, prAtn.id as prc_id_prioridad, prAtn.codigo as prc_codigoPrioridad, frCt.nombre as prc_formaContacto, ctPct.parentesco as prc_contactoPaciente')
                            ->addSelect('usrRg.username as prc_usernameUserReg, usrRg.id as prc_id_userReg, usrMd.username as prc_usernameUserMod, usrMd.id as prc_id_userMod')
                            ->addSelect('concat(coalesce(usrRgEmp.apellido, \'\'), \', \', coalesce(usrRgEmp.nombre, \'\')) as prc_nombreUserReg')
                            ->addSelect('case when (usrMd.username is not null) then concat(coalesce(usrMdEmp.apellido, \'\'), \', \', coalesce(usrMdEmp.nombre, \'\')) else \'\' end as prc_nombreUserMod')
                            ->addSelect('case when (radXInd.id is not null) then concat(coalesce(radXInd.apellido, \'\'), \', \', coalesce(radXInd.nombre, \'\')) else \'\' end as prc_radXInd, radXInd.id as prc_id_radXInd')
                            ->from('MinsalSimagdBundle:ImgSolicitudEstudio', 'prc')
                            ->innerJoin('prc.idEmpleado', 'empprc')
                            ->innerJoin('prc.idAtenAreaModEstab', 'aams')
                            ->innerJoin('prc.idUserReg', 'usrRg')
                            ->leftJoin('prc.idUserMod', 'usrMd')
                            ->leftJoin('prc.idExpediente', 'exp')
                            ->innerJoin('prc.idAreaServicioDiagnostico', 'm')
                            ->innerJoin('prc.idEstablecimientoReferido', 'stdref')
                            ->leftJoin('prc.idEstablecimientoDiagnosticante', 'stdiag')
                            ->leftJoin('prc.idPrioridadAtencion', 'prAtn')
                            ->leftJoin('prc.idFormaContacto', 'frCt')
                            ->leftJoin('prc.idContactoPaciente', 'ctPct')
                            ->innerJoin('aams.idAtencion', 'atn')
                            ->innerJoin('aams.idAreaModEstab', 'ams')
                            ->innerJoin('aams.idEstablecimiento', 'stdroot')
                            ->innerJoin('ams.idAreaAtencion', 'ar')
                            ->leftJoin('exp.idPaciente', 'pct')
//                            ->leftJoin('MinsalSiapsBundle:MntExpediente', 'explocal',
//                                    \Doctrine\ORM\Query\Expr\Join::WITH,
//                                    'pct.id = explocal.idPaciente')//http://stackoverflow.com/questions/15815869/doctrine2-left-join-with-2-conditions
                            ->leftJoin('usrRg.idEmpleado', 'usrRgEmp')
                            ->leftJoin('usrMd.idEmpleado', 'usrMdEmp')
                            ->leftJoin('empprc.idTipoEmpleado', 'tpEmp')
                            ->leftJoin('prc.idEstadoSolicitud', 'statusSc')
                            ->leftJoin('prc.idRadiologoAgregaIndicaciones', 'radXInd');
        
        $query->leftJoin('prc.idExpedienteFicticio', 'unknExp')
                            ->leftJoin('MinsalSiapsBundle:MntExpediente', 'explocal',
                                    \Doctrine\ORM\Query\Expr\Join::WITH,
                                            $query->expr()->andx(
                                                $query->expr()->eq('pct.id', 'explocal.idPaciente'),
                                                $query->expr()->eq('explocal.idEstablecimiento', ':id_est_explocal')
                                            )
                            )
                            ->setParameter('id_est_explocal', $id_estab);
        
         $query->andWhere($query->expr()->orx(
                                $query->expr()->eq('prc.idEstablecimientoReferido', ':id_est_ref'),
                                $query->expr()->eq('prc.idEstablecimientoDiagnosticante', ':id_est_diag'),
                                $query->expr()->eq('aams.idEstablecimiento', ':id_est')
                            ))
                            ->setParameter('id_est_ref', $id_estab)
                            ->setParameter('id_est_diag', $id_estab)
                            ->setParameter('id_est', $id_estab);
        
        $query->orderBy('prc.id', 'desc')
                            ->distinct();
        
        /*
         * --| add filters from BSTABLE_FILTER to query
         */
        $simagd_er_model    = $this->getEntityManager()->getRepository('MinsalSimagdBundle:ImgSolicitudEstudio');
        $apply_filters      = $simagd_er_model->getBsTableFiltersV2($query, $bs_filters);
        if ($apply_filters !== false)
        {
            $query->andWhere($apply_filters);
        }
        /*
         * |-- END filters from BSTABLE_FILTER to query
         */
        
        return $query->getQuery()->getScalarResult();
    }
    
    public function obtenerPacientesV2($idEstab, $numeroExp, $criteria, $fechaNacimiento, $dui, $limiteR, $min_numeroExp = null, $bs_filters = array())
    {
        /** Ningún parámetro fué enviado */
        if(count($criteria) < 1 && !$numeroExp && !$fechaNacimiento && !$dui && !$min_numeroExp) {
            $limiteR = 0;
        }
        
        /** Consulta de pacientes */
        $query = $this->getEntityManager()
                        ->createQueryBuilder('exp')
                            ->select('exp')
                            ->addSelect('pct')
                            ->addSelect('concat(pct.primerApellido, \' \', coalesce(pct.segundoApellido, \'\'), \', \', pct.primerNombre, \' \', coalesce(pct.segundoNombre, \'\')) as pct_nombreCompleto')
                            ->addSelect('sex.nombre as pct_sexo, pctOcp.nombre as pct_ocupacion, pctEstCv.nombre as pct_estadoCivil, pctNcl.nacionalidad as pct_nacionalidad')
                            ->from('MinsalSiapsBundle:MntExpediente', 'exp')
                            ->innerJoin('exp.idPaciente', 'pct')
                            ->innerJoin('pct.idSexo', 'sex')
                            ->leftJoin('pct.idOcupacion', 'pctOcp')
                            ->leftJoin('pct.idEstadoCivil', 'pctEstCv')
                            ->leftJoin('pct.idNacionalidad', 'pctNcl')
                            ->where('exp.idEstablecimiento = :id_est')
                            ->setParameter('id_est', $idEstab)
                            ->orderBy('exp.numero')
                            ->addOrderBy('pct.primerApellido')
                            ->addOrderBy('pct.primerNombre');
        
        /** Número de expediente enviado */
        if($numeroExp) {
            $query->andWhere($query->expr()->like('LOWER(exp.numero)', ':num_exp'))
                            ->setParameter('num_exp', '%' . strtolower($numeroExp) . '%');
        }
        
        /** Número de identificación */
        if($dui) {
            $query->andWhere('pct.numeroDocIdePaciente = :dui')
                            ->setParameter('dui', $dui);
        }
        
        /** Fecha de nacimiento */
        if($fechaNacimiento) {
            $query->andWhere('pct.fechaNacimiento = :fechaNacimiento')
                            ->setParameter('fechaNacimiento', $fechaNacimiento);
        }
        
        /** Coincidencias en campos de texto */
        if(count($criteria) > 0) {
            $andX = $query->expr()->andX();

            foreach($criteria as $key => $value) {
                $andX->add($query->expr()->like('LOWER(pct.' . $key . ')', ':' . $key));                
                $query->setParameter($key, '%' . strtolower($value) . '%');
            }
            $query->andWhere($andX);
        }
        
        /** NUM de Expediente enviado - Min Search */
        if($min_numeroExp) {
            $query->andWhere($query->expr()->like('LOWER(exp.numero)', ':num_exp'))
                            ->setParameter('num_exp', '%' . strtolower($min_numeroExp) . '%');
        }
        
        $query->distinct();
        $query->setMaxResults($limiteR);
        
        /*
         * --| add filters from BSTABLE_FILTER to query
         */
        $simagd_er_model    = $this->getEntityManager()->getRepository('MinsalSimagdBundle:ImgSolicitudEstudio');
        $apply_filters      = $simagd_er_model->getBsTableFiltersV2($query, $bs_filters);
        if ($apply_filters !== false)
        {
            $query->andWhere($apply_filters);
        }
        /*
         * |-- END filters from BSTABLE_FILTER to query
         */
        
        return $query->getQuery()->getScalarResult();
    }

//     http://stackoverflow.com/questions/19185587/left-join-on-condition-and-other-condition-syntax-in-doctrine
    public function obtenerPreinscripcionesNoCitadasV2($id_estab, $bs_filters = array())
    {
        /** SubQuery */
        $subQuery = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('cit')
                            ->from('MinsalSimagdBundle:ImgCita', 'cit')
                            ->where('prc.id = cit.idSolicitudEstudio');

        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder('prc')
                            ->select('prc')
                            ->addSelect('exp')
                            ->addSelect('statusSc')
                            ->addSelect('explocal')->addSelect('unknExp')
                            ->addSelect('prAtn')
                            ->addSelect('concat(pct.primerApellido, \' \', coalesce(pct.segundoApellido, \'\'), \', \', pct.primerNombre, \' \', coalesce(pct.segundoNombre, \'\')) as prc_paciente')
                            ->addSelect('stdroot.nombre as prc_origen, stdroot.id as prc_id_origen, ar.nombre as prc_areaAtencion, ar.id as prc_id_areaAtencion, atn.nombre as prc_atencion, atn.id as prc_id_atencion')
                            ->addSelect('concat(coalesce(emp.apellido, \'\'), \', \', coalesce(emp.nombre, \'\')) as prc_empleado, emp.id as prc_id_empleado, tpEmp.tipo as prc_tipoEmpleado')
                            ->addSelect('stdref.nombre as prc_referido, stdref.id as prc_id_referido, stdiag.nombre as prc_diagnosticante, stdiag.id as prc_id_diagnosticante')
                            ->addSelect('m.nombrearea as prc_modalidad, m.id as prc_id_modalidad, prAtn.nombre as prc_prioridadAtencion, prAtn.id as prc_id_prioridad, prAtn.codigo as prc_codigoPrioridad, frCt.nombre as prc_formaContacto, ctPct.parentesco as prc_contactoPaciente')
                            ->addSelect('usrRg.username as prc_usernameUserReg, usrRg.id as prc_id_userReg, usrMd.username as prc_usernameUserMod, usrMd.id as prc_id_userMod')
                            ->addSelect('concat(coalesce(usrRgEmp.apellido, \'\'), \', \', coalesce(usrRgEmp.nombre, \'\')) as prc_nombreUserReg')
                            ->addSelect('case when (usrMd.username is not null) then concat(coalesce(usrMdEmp.apellido, \'\'), \', \', coalesce(usrMdEmp.nombre, \'\')) else \'\' end as prc_nombreUserMod')
                            ->addSelect('case when (radXInd.id is not null) then concat(coalesce(radXInd.apellido, \'\'), \', \', coalesce(radXInd.nombre, \'\')) else \'\' end as prc_radXInd, radXInd.id as prc_id_radXInd')
                            ->from('MinsalSimagdBundle:ImgSolicitudEstudio', 'prc')
                            ->innerJoin('prc.idEmpleado', 'emp')
                            ->innerJoin('prc.idAtenAreaModEstab', 'aams')
                            ->innerJoin('prc.idUserReg', 'usrRg')
                            ->leftJoin('prc.idUserMod', 'usrMd')
                            ->leftJoin('prc.idExpediente', 'exp')
                            ->innerJoin('prc.idAreaServicioDiagnostico', 'm')
                            ->innerJoin('prc.idEstablecimientoReferido', 'stdref')
                            ->leftJoin('prc.idEstablecimientoDiagnosticante', 'stdiag')
                            ->leftJoin('prc.idPrioridadAtencion', 'prAtn')
                            ->leftJoin('prc.idFormaContacto', 'frCt')
                            ->leftJoin('prc.idContactoPaciente', 'ctPct')
                            ->innerJoin('aams.idAtencion', 'atn')
                            ->innerJoin('aams.idAreaModEstab', 'ams')
                            ->innerJoin('aams.idEstablecimiento', 'stdroot')
                            ->innerJoin('ams.idAreaAtencion', 'ar')
                            ->leftJoin('exp.idPaciente', 'pct')
                            ->leftJoin('usrRg.idEmpleado', 'usrRgEmp')
                            ->leftJoin('usrMd.idEmpleado', 'usrMdEmp')
                            ->leftJoin('emp.idTipoEmpleado', 'tpEmp')
                            ->leftJoin('prc.idEstadoSolicitud', 'statusSc')
                            ->leftJoin('prc.idRadiologoAgregaIndicaciones', 'radXInd')
                            ->where('prc.idEstablecimientoReferido = :id_std_ref')
                            ->setParameter('id_std_ref', $id_estab)
                            ->andWhere('prc.requiereCita = TRUE');
        
        $query->leftJoin('prc.idExpedienteFicticio', 'unknExp')
                            ->leftJoin('MinsalSiapsBundle:MntExpediente', 'explocal',
                                    \Doctrine\ORM\Query\Expr\Join::WITH,
                                            $query->expr()->andx(
                                                $query->expr()->eq('pct.id', 'explocal.idPaciente'),
                                                $query->expr()->eq('explocal.idEstablecimiento', ':id_est_explocal')
                                            )
                            )
                            ->setParameter('id_est_explocal', $id_estab);
        
        if(is_array($bs_filters) && array_key_exists('xparam', $bs_filters))
        {
            if (is_array($bs_filters['xparam']))
            {
                /*
                * Modalidad enviada como parámetro
                */
                if (array_key_exists('navbar_search_modalidad', $bs_filters['xparam']) && $bs_filters['xparam']['navbar_search_modalidad']['value'])
                {
                    /** Modalidad enviada */
                    $query->andWhere('prc.idAreaServicioDiagnostico = :id_mod')
                                ->setParameter('id_mod', $bs_filters['xparam']['navbar_search_modalidad']['value']);
                }
                /*
                * Número de expediente enviado como parámetro
                */
                if (array_key_exists('navbar_search_expediente', $bs_filters['xparam']) && $bs_filters['xparam']['navbar_search_expediente']['value'])
                {
                    /** Número de expediente enviado */
                    $query->andWhere($query->expr()->like('LOWER(explocal.numero)', ':num_exp'))
                                ->setParameter('num_exp', '%' . strtolower($bs_filters['xparam']['navbar_search_expediente']['value']) . '%');
                }
            }
        }

        $query->andWhere($query->expr()->not($query->expr()->exists($subQuery->getDql())));

        $query->orderBy('prAtn.id', 'asc')
                            ->addOrderBy('prc.id', 'desc')
                            ->distinct();
        
        /*
         * --| add filters from BSTABLE_FILTER to query
         */
        $simagd_er_model    = $this->getEntityManager()->getRepository('MinsalSimagdBundle:ImgSolicitudEstudio');
        $apply_filters      = $simagd_er_model->getBsTableFiltersV2($query, $bs_filters);
        if ($apply_filters !== false)
        {
            $query->andWhere($apply_filters);
        }
        /*
         * |-- END filters from BSTABLE_FILTER to query
         */

        return $query->getQuery()->getScalarResult();
    }

    public function obtenerDatosRecientesPacienteV2($idPaciente)
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('prc.id as prcId, prc.tallaPaciente as talla')
                            ->addSelect('case when prc.pesoActualKg is not null then prc.pesoActualKg else prc.pesoActualLb / 2.20462262 end as pesoKg')
                            ->addSelect('case when prc.pesoActualLb is not null then prc.pesoActualLb else prc.pesoActualKg * 2.20462262 end as pesoLb')
                            ->from('MinsalSimagdBundle:ImgSolicitudEstudio', 'prc')
                            ->innerJoin('prc.idExpediente', 'exp')
                            ->where('exp.idPaciente = :id_pct')
                            ->setParameter('id_pct', $idPaciente)
                            ->orderBy('prc.id', 'desc');

        $query->andWhere($query->expr()->orx(
                            $query->expr()->isNotNull('prc.pesoActualKg'),
                            $query->expr()->isNotNull('prc.pesoActualLb')
                        ));

        $query->distinct();
        $query->setMaxResults(1);

        return $query->getQuery()->getOneOrNullResult();
    }

    public function obtenerAtencionesAgrupadasV2($id_estabLocal, $return = 'scalar')
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('ar.id as id_ar, atn.id as id_atn')
                            ->from('MinsalSiapsBundle:CtlAreaAtencion', 'ar')
                            ->innerJoin('MinsalSiapsBundle:MntAreaModEstab', 'ams',
                                    \Doctrine\ORM\Query\Expr\Join::WITH,
                                    'ar.id = ams.idAreaAtencion')
                            ->innerJoin('MinsalSiapsBundle:MntAtenAreaModEstab', 'aams',
                                    \Doctrine\ORM\Query\Expr\Join::WITH,
                                    'ams.id = aams.idAreaModEstab')
                            ->innerJoin('aams.idAtencion', 'atn')
                            ->where('ams.idEstablecimiento = :id_est')
                            ->setParameter('id_est', $id_estabLocal)
                            ->andWhere('aams.idEstablecimiento = :id_est')
                            ->setParameter('id_est', $id_estabLocal)
                            ->groupBy('ar.id')
                            ->addGroupBy('atn.id')
                            ->orderBy('ar.id', 'desc')
                            ->addOrderBy('atn.id', 'desc')
                            ->distinct();

        return $return == 'query' ?
	    $query : ($return == 'scalar' ? $query->getQuery()->getScalarResult()
		: $query->getQuery()->getResult()
	    );
    }

    public function obtenerEmpleadosAgrupadosV2($id_estabLocal, $return = 'scalar')
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('ar.id as id_ar, atn.id as id_atn, emp.id as id_emp')
                            ->from('MinsalSiapsBundle:MntEmpleado', 'emp')
                            ->innerJoin('MinsalSiapsBundle:MntEmpleadoEspecialidadEstab', 'ees',
                                    \Doctrine\ORM\Query\Expr\Join::WITH,
                                    'emp.id = ees.idEmpleado')
                            ->innerJoin('MinsalSiapsBundle:MntAtenAreaModEstab', 'aams',
                                    \Doctrine\ORM\Query\Expr\Join::WITH,
                                    'aams.id = ees.idAtenAreaModEstab')
                            ->innerJoin('MinsalSiapsBundle:MntAreaModEstab', 'ams',
                                    \Doctrine\ORM\Query\Expr\Join::WITH,
                                    'ams.id = aams.idAreaModEstab')
                            ->innerJoin('ams.idAreaAtencion', 'ar')
                            ->innerJoin('aams.idAtencion', 'atn')
                            ->where('ams.idEstablecimiento = :id_est')
                            ->setParameter('id_est', $id_estabLocal)
                            ->andWhere('aams.idEstablecimiento = :id_est')
                            ->setParameter('id_est', $id_estabLocal)
                            ->groupBy('ar.id')
                            ->addGroupBy('atn.id')
                            ->addGroupBy('emp.id')
                            ->orderBy('ar.id', 'desc')
                            ->addOrderBy('atn.id', 'desc')
                            ->distinct();

        return $return == 'query' ?
	    $query : ($return == 'scalar' ? $query->getQuery()->getScalarResult()
		: $query->getQuery()->getResult()
	    );
    }
    
    /**
     * Método perteneciente a módulo <simagd>
     * @param type $idEstablecimiento
     * @return type
     */
    public function getSourceDataAreaAtencion($idEstablecimiento)
    {
        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('ar.id as id, ar.nombre as text')
                            ->from('MinsalSiapsBundle:CtlAreaAtencion', 'ar')
                            ->orderBy('ar.nombre')
                            ->distinct();
        
        return $query->getQuery()->getScalarResult();
    }
        
    /**
     * Método perteneciente a módulo <simagd>
     * @param type $idEstablecimiento
     * @return type
     */
    public function getSourceDataAtencion($idEstablecimiento)
    {
        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('atn.id as id, atn.nombre as text')
                            ->from('MinsalSiapsBundle:CtlAtencion', 'atn')
                            ->orderBy('atn.nombre')
                            ->distinct();
        
        return $query->getQuery()->getScalarResult();
    }
        
    /**
     * Método perteneciente a módulo <simagd>
     * @param type $idEstablecimiento
     * @return type
     */
    public function getSourceDataOrigen($idEstablecimiento)
    {
        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('stdsol.id as id, stdsol.nombre as text, IDENTITY(stdsol.idTipoEstablecimiento) as tipo')
                            ->from('MinsalSiapsBundle:CtlEstablecimiento', 'stdsol')
                            ->orderBy('stdsol.idTipoEstablecimiento')
                            ->addOrderBy('stdsol.nombre');
                
        $query->distinct();
        
        return $query->getQuery()->getScalarResult();
    }
    
    /*
     * --| FILTERS for bootstrapTables
     */
    public function getBsTableFiltersV2($query, $bs_filters = array())
    {
        /*
         * custom FILTER COLLECTION for BSTABLE
         */
        if (is_array($bs_filters) && count($bs_filters) > 0)
        {
            $andX = $query->expr()->andX();

            foreach($bs_filters as $key => $value)
            {
                if ($key == 'xparam')
                {
                    if (is_array($value) && count($value) > 0)
                    {
                        foreach($value as $xkey => $xvalue)
                        {
                            if ($xvalue['type'] == 'number')
                            {
                                if (is_array($xvalue['value']) && count($xvalue['value']) == 2)
                                {
                                    if ($xvalue['value']['left'] && preg_match('/^[1-9][0-9]*$/', $xvalue['value']['left']))
                                    {
                                        $andX->add($query->expr()->gte(str_replace('_', '.', $xvalue['target']), ':' . $xkey . '_number_range_left'));
                                        $query->setParameter($xkey . '_number_range_left', $xvalue['value']['left']);
                                    }
                                    if ($xvalue['value']['right'] && preg_match('/^[1-9][0-9]*$/', $xvalue['value']['right']))
                                    {
                                        $andX->add($query->expr()->lte(str_replace('_', '.', $xvalue['target']), ':' . $xkey . '_number_range_right'));
                                        $query->setParameter($xkey . '_number_range_right', $xvalue['value']['right']);
                                    }
                                }
                            }
                            if ($xvalue['type'] == 'combodate')
                            {
                                if (is_array($xvalue['value']) && count($xvalue['value']) == 2)
                                {
                                    if ($xvalue['value']['left'] && preg_match('/(\d{4})-(\d{2})-(\d{2}) (\d{2}):(\d{2})/', $xvalue['value']['left']))
                                    {
                                        $andX->add($query->expr()->gte(str_replace('_', '.', $xvalue['target']), ':' . $xkey . '_date_range_left'));
                                        $query->setParameter($xkey . '_date_range_left', \DateTime::createFromFormat('Y-m-d H:i', $xvalue['value']['left']));
                                    }
                                    if ($xvalue['value']['right'] && preg_match('/(\d{4})-(\d{2})-(\d{2}) (\d{2}):(\d{2})/', $xvalue['value']['right']))
                                    {
                                        $andX->add($query->expr()->lte(str_replace('_', '.', $xvalue['target']), ':' . $xkey . '_date_range_right'));
                                        $query->setParameter($xkey . '_date_range_right', \DateTime::createFromFormat('Y-m-d H:i', $xvalue['value']['right']));
                                    }
                                }
                            }
                            if ($xvalue['type'] == 'text')
                            {
                                $str = trim($xvalue['value']);
                                if (!is_array($xvalue['value']) && !empty($str))
                                {
                                    $andX->add($query->expr()->like('LOWER(' . str_replace('_', '.', $xvalue['target']) . ')', ':' . $xkey . '_text'));
                                    $query->setParameter($xkey . '_text', '%' . strtolower($str) . '%');
                                }
                            }
                            if ($xvalue['type'] == 'select2')
                            {
                                if (is_array($xvalue['value']) && count($xvalue['value']) > 0)
                                {
                                    $str_target = str_replace(array("[", "]", "(", ")", " "), "", $xvalue['target']);
                                    $ar_target  = explode(',', $str_target);
                                    if (is_array($ar_target) && count($ar_target) > 0)
                                    {
                                        if (count($ar_target) > 1)
                                        {
                                            $orX    = $query->expr()->orX();
                                            foreach ($ar_target as $trg => $target)
                                            {
                                                $orX->add($query->expr()->in(str_replace('_', '.', $target), ':' . $xkey . '_select2'));
                                                $query->setParameter($xkey . '_select2', $xvalue['value']);
                                            }
                                            $andX->add($orX);
                                        }
                                        else
                                        {
                                            $andX->add($query->expr()->in(str_replace('_', '.', $ar_target[0]), ':' . $xkey . '_select2'));
                                            $query->setParameter($xkey . '_select2', $xvalue['value']);
                                        }
                                    }
                                    else
                                    {
                                        $andX->add($query->expr()->in(str_replace('_', '.', $xvalue['target']), ':' . $xkey . '_select2'));
                                        $query->setParameter($xkey . '_select2', $xvalue['value']);
                                    }
                                }
                            }
                            if ($xvalue['type'] == 'boolean')
                            {
                                $bool_value = is_array($xvalue['value']) && count($xvalue['value']) > 0 ? TRUE : FALSE;
                                $andX->add($query->expr()->eq(str_replace('_', '.', $xvalue['target']), $query->expr()->literal($bool_value)));
                            }
                        }
                    }
                }
                else
                {
                    if ($value['type'] == 'number')
                    {
                        if (is_array($value['value']) && count($value['value']) == 2)
                        {
                            if ($value['value']['left'] && preg_match('/^[1-9][0-9]*$/', $value['value']['left']))
                            {
                                $andX->add($query->expr()->gte(str_replace('_', '.', $value['target']), ':' . $key . '_number_range_left'));
                                $query->setParameter($key . '_number_range_left', $value['value']['left']);
                            }
                            if ($value['value']['right'] && preg_match('/^[1-9][0-9]*$/', $value['value']['right']))
                            {
                                $andX->add($query->expr()->lte(str_replace('_', '.', $value['target']), ':' . $key . '_number_range_right'));
                                $query->setParameter($key . '_number_range_right', $value['value']['right']);
                            }
                        }
                    }
                    if ($value['type'] == 'combodate')
                    {
                        if (is_array($value['value']) && count($value['value']) == 2)
                        {
                            if ($value['value']['left'] && preg_match('/(\d{4})-(\d{2})-(\d{2}) (\d{2}):(\d{2})/', $value['value']['left']))
                            {
                                $andX->add($query->expr()->gte(str_replace('_', '.', $value['target']), ':' . $key . '_date_range_left'));
                                $query->setParameter($key . '_date_range_left', \DateTime::createFromFormat('Y-m-d H:i', $value['value']['left']));
                            }
                            if ($value['value']['right'] && preg_match('/(\d{4})-(\d{2})-(\d{2}) (\d{2}):(\d{2})/', $value['value']['right']))
                            {
                                $andX->add($query->expr()->lte(str_replace('_', '.', $value['target']), ':' . $key . '_date_range_right'));
                                $query->setParameter($key . '_date_range_right', \DateTime::createFromFormat('Y-m-d H:i', $value['value']['right']));
                            }
                        }
                    }
                    if ($value['type'] == 'text')
                    {
                        $str = trim($value['value']);
                        if (!is_array($value['value']) && !empty($str))
                        {
                            $andX->add($query->expr()->like('LOWER(' . str_replace('_', '.', $value['target']) . ')', ':' . $key . '_text'));
                            $query->setParameter($key . '_text', '%' . strtolower($str) . '%');
                        }
                    }
                    if ($value['type'] == 'select2')
                    {
                        if (is_array($value['value']) && count($value['value']) > 0)
                        {
                            $str_target = str_replace(array("[", "]", "(", ")", " "), "", $value['target']);
                            $ar_target  = explode(',', $str_target);
                            if (is_array($ar_target) && count($ar_target) > 0)
                            {
                                if (count($ar_target) > 1)
                                {
                                    $orX    = $query->expr()->orX();
                                    foreach ($ar_target as $trg => $target)
                                    {
                                        $orX->add($query->expr()->in(str_replace('_', '.', $target), ':' . $key . '_select2'));
                                        $query->setParameter($key . '_select2', $value['value']);
                                    }
                                    $andX->add($orX);
                                }
                                else
                                {
                                    $andX->add($query->expr()->in(str_replace('_', '.', $ar_target[0]), ':' . $key . '_select2'));
                                    $query->setParameter($key . '_select2', $value['value']);
                                }
                            }
                            else
                            {
                                $andX->add($query->expr()->in(str_replace('_', '.', $value['target']), ':' . $key . '_select2'));
                                $query->setParameter($key . '_select2', $value['value']);
                            }
                        }
                    }
                    if ($value['type'] == 'boolean')
                    {
                        $bool_value = is_array($value['value']) && count($value['value']) > 0 ? TRUE : FALSE;
                        $andX->add($query->expr()->eq(str_replace('_', '.', $value['target']), $query->expr()->literal($bool_value)));
                    }
                }
            }
            
            return $andX;
        }

        return false;
    }
    
}

//select 	l.id 	   as l_id, 	      l.id_establecimiento      as l_id,
//		    xE.id	 as xE_id, 	xE.numero 			as xE_numero,  
//		    x.id 	 as x_id, 	x.numero 			as x_numero, 	x.id_establecimiento 	as x_establecimiento 
//from img_lectura l 
//	left join img_estudio_paciente e on e.id = l.id_estudio 
//	left join mnt_expediente xE on xE.id = e.id_expediente 
//	left join mnt_paciente p on p.id = xE.id_paciente 
//	left join mnt_expediente x on (p.id = x.id_paciente and x.id_establecimiento = 30) 
//where l.id_establecimiento != 30;