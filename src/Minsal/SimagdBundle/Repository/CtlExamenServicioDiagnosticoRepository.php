<?php

namespace Minsal\SimagdBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * CtlExamenServicioDiagnosticoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CtlExamenServicioDiagnosticoRepository extends EntityRepository
{
    /**
     * Método perteneciente a módulo <simagd>
     * @param type $idAtencion
     * @return type
     */
    public function obtenerExamenesImagenologia ($idAtencion )
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('exm')
                            ->from('MinsalSimagdBundle:CtlExamenServicioDiagnostico', 'exm')
                            ->where('exm.idAtencion = :id_atn')
                            ->setParameter('id_atn', $idAtencion)
                            ->orderBy('exm.idsexo')
                            ->addOrderBy('exm.descripcion')
                            ->distinct();
        
        return $query;
    }
    
    /**
     * Método perteneciente a módulo <simagd>
     * @param type $idAtencion
     * @return type
     */
    public function obtenerExamenesRealizablesLocal($idEstablecimiento, $idAtencion = '97' )
    {
        /** SubQuery */
        $subQuery = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('mr')
                            ->from('MinsalSimagdBundle:MntAreaExamenEstablecimiento', 'mr')
                            ->where('exm.id = mr.idExamenServicioDiagnostico')
                            ->andWhere('mr.imgHabilitado = TRUE')
                            ->andWhere('mr.idEstablecimiento = :id_est');
                
        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('exm')
                            ->from('MinsalSimagdBundle:CtlExamenServicioDiagnostico', 'exm')
                            ->andWhere('exm.idAtencion = :id_atn')
                            ->setParameter('id_atn', $idAtencion);
        
        $query->andWhere($query->expr()->exists($subQuery->getDql()))
                            ->setParameter('id_est', $idEstablecimiento);
        
        $query->orderBy('exm.idsexo')
                            ->addOrderBy('exm.descripcion');
                
        $query->distinct();
        
        return $query->getQuery()->getResult();
    }

    public function data($id_atn, $bs_filters = array())
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder('exm')
                            ->select('exm')
                            ->addSelect('m')

                            ->addSelect('exm.id AS id, m.nombrearea AS modalidad, m.idarea AS codigo_modalidad, exm.descripcion AS nombre, exm.idestandar as codigo, exm.fechahorareg AS fecha_registro, exm.fechahoramod AS fecha_edicion')

                            // ->addSelect('IDENTITY(exm.idAtencion) AS exm_id_atencion')
                            // ->addSelect('usrRg.username AS expl_usernameUserReg, usrRg.id AS expl_id_userReg, usrMd.username AS expl_usernameUserMod, usrMd.id AS expl_id_userMod')
                            // ->addSelect('CONCAT(COALESCE(usrRgEmp.apellido, \'\'), \', \', COALESCE(usrRgEmp.nombre, \'\')) AS expl_nombreUserReg')
                            // ->addSelect('CASE WHEN (usrMd.username IS NOT NULL) THEN CONCAT(COALESCE(usrMdEmp.apellido, \'\'), \', \', COALESCE(usrMdEmp.nombre, \'\')) ELSE \'\' END AS expl_nombreUserMod')
                            // ->addSelect('CASE WHEN (sex.id IS NOT NULL) THEN sex.nombre ELSE \'Todos los sexos\' END AS exm_sexo')
                            ->from('MinsalSimagdBundle:CtlExamenServicioDiagnostico', 'exm')
                            ->leftJoin('exm.idAreaServicioDiagnostico', 'm')
                            ->where('exm.idAtencion = :id_atn')
                            ->setParameter('id_atn', $id_atn)
                            ->orderBy('m.idarea', 'DESC')
                            ->addOrderBy('exm.idestandar', 'DESC')
                            ->distinct();

        /*
         * --| add filters from BSTABLE_FILTER to query
         */
        $simagd_er_model    = $this->getEntityManager()->getRepository('MinsalSimagdBundle:ImgSolicitudEstudio');
        $apply_filters      = $simagd_er_model->getBsTableFiltersV2($query, $bs_filters);
        if ($apply_filters !== false)
        {
            $query->andWhere($apply_filters);
        }
        /*
         * |-- END filters from BSTABLE_FILTER to query
         */

        return $query->getQuery()->getScalarResult();
    }

}