<?php

namespace Minsal\SimagdBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * LecturaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LecturaRepository extends EntityRepository
{
    public function obtenerTiposResultadoList()
    {
        $tiposResultado = $this->getEntityManager()
                    ->getRepository('MinsalSimagdBundle:ImgCtlTipoResultado')->findAll();
        
        $list = array();
        
        foreach ($tiposResultado as $tipoResult)
        {
            if(!$tipoResult->getIndeterminado()) {
                $list['Determinado'][$tipoResult->getId()] = $tipoResult;
            }
            else {
                $list['Indeterminado'][$tipoResult->getId()] = $tipoResult;
            }
        }
        
        return $list;
    }
    
    public function obtenerUltimoCorrelativo($id_estab, $idAreaServicioDiagnostico)
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('MAX(lct.correlativo) as maxCod, IDENTITY(lct.idEstablecimiento), IDENTITY(prc.idAreaServicioDiagnostico )')
                            ->from('MinsalSimagdBundle:ImgLectura', 'lct')
                            ->innerJoin('lct.idEstudio', 'est')
                            ->innerJoin('est.idProcedimientoRealizado', 'prz')
                            ->innerJoin('prz.idSolicitudEstudio', 'prc')
                            ->where('lct.idEstablecimiento = :id_est')
                            ->setParameter('id_est', $id_estab)
                            ->andWhere('prc.idAreaServicioDiagnostico = :id_mod')
                            ->setParameter('id_mod', $idAreaServicioDiagnostico)
                            ->groupBy('lct.idEstablecimiento')
                            ->addGroupBy('prc.idAreaServicioDiagnostico');

        $query->distinct();
        $query->setMaxResults(1);
        
        return $query->getQuery()->getOneOrNullResult();
    }
    
    public function obtenerAccesoEstab($id, $idEstab)
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('lct.id as lctId')
                            ->from('MinsalSimagdBundle:ImgLectura', 'lct')
                            ->where('lct.id = :id_lct')
                            ->setParameter('id_lct', $id)
                            ->andWhere('lct.idEstablecimiento = :id_est')
                            ->setParameter('id_est', $idEstab);

        $query->distinct();
        $query->setMaxResults(1);
        
        return $query->getQuery()->getOneOrNullResult() ? true : false;
    }
    
    public function obtenerAccesoLectura($id, $idUser)
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('lct.id as lctId')
                            ->from('MinsalSimagdBundle:ImgLectura', 'lct')
                            ->where('lct.id = :id_lct')
                            ->setParameter('id_lct', $id)
                            ->andWhere('lct.idUserReg = :id_user_lct_reg')
                            ->setParameter('id_user_lct_reg', $idUser);

        $query->distinct();
        $query->setMaxResults(1);
        
        return $query->getQuery()->getOneOrNullResult() ? true : false;
    }
    
    public function lecturaFueTranscrita($idLct = '-1' )
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('diag.id as diagId')
                            ->from('MinsalSimagdBundle:ImgDiagnostico', 'diag')
                            ->where('diag.idLectura = :id_lct')
                            ->setParameter('id_lct', $idLct);

        $query->distinct();
        $query->setMaxResults(1);
        
        return $query->getQuery()->getOneOrNullResult() ? true : false;
    }
    
    public function obtenerLecturas($id_estab, $bs_filters = array())
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('lct')
                            ->from('MinsalSimagdBundle:ImgLectura', 'lct')
                            ->where('lct.idEstablecimiento = :id_est_diag')
                            ->setParameter('id_est_diag', $id_estab)
                            ->orderBy('lct.fechaLectura', 'desc')
                            ->addOrderBy('lct.id', 'desc');
        $query->distinct();
        
        return $query->getQuery()->getResult();
    }
    
    public function obtenerPendientesLectura($id_estab, $bs_filters = array())
    {
        /** SubQuery */
        $subQuery = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('lct')
                            ->from('MinsalSimagdBundle:ImgLectura', 'lct')
//                            ->where('lct.idEstadoLectura NOT IN ( 4, 5, 6 )')
                            ->andWhere('lct.idEstudio = pndL.idEstudio');
                
        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('pndL')
                            ->from('MinsalSimagdBundle:ImgPendienteLectura', 'pndL')
                            ->where('pndL.idEstablecimiento = :id_est_diag')
                            ->setParameter('id_est_diag', $id_estab)
                            ->orderBy('pndL.fechaIngresoLista', 'asc')
                            ->addOrderBy('pndL.id', 'desc');
        
        $query->andWhere($query->expr()->not($query->expr()->exists($subQuery->getDql())));
                
        $query->distinct();
        
        return $query->getQuery()->getResult();
    }
    
    public function obtenerPendientesLecturaPersonal($id_estab, $sessionUser, $bs_filters = array())
    {
        /** SubQuery */
        $subQuery = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('lct')
                            ->from('MinsalSimagdBundle:ImgLectura', 'lct')
                            ->where('lct.idUserReg = :id_user')
                            ->andWhere('lct.idEstadoLectura NOT IN ( 4, 5, 6 )')
                            ->andWhere('lct.idEstudio = pndL.idEstudio');
                
        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('pndL')
                            ->from('MinsalSimagdBundle:ImgPendienteLectura', 'pndL')
                            ->where('pndL.idEstablecimiento = :id_est_diag')
                            ->setParameter('id_est_diag', $id_estab)
                            ->orderBy('pndL.fechaIngresoLista', 'asc')
                            ->addOrderBy('pndL.id', 'desc');
        
        $query->andWhere($query->expr()->exists($subQuery->getDql()))
                            ->setParameter('id_user', $sessionUser);
                
        $query->distinct();
        
        return $query->getQuery()->getResult();
    }

    public function obtenerLecturasV2($id_estab, $bs_filters = array())
    {
        $query = $this->getEntityManager()
                        ->createQueryBuilder('lct')
                            ->select('lct')
                            ->addSelect('est')
                            ->addSelect('ptrAsc')
                            ->addSelect('explocal')->addSelect('unknExp')
                            ->addSelect('prAtn')
                            ->addSelect('statusprz.id as prz_id_estado, statusprz.nombreEstado as prz_estado, statusprz.codigo as prz_codEstado')
                            ->addSelect('statuslct.id as lct_id_estado, statuslct.nombreEstado as lct_estado, statuslct.codigo as lct_codEstado, tipoR.id as lct_id_tipoResultado, tipoR.nombreTipo as lct_tipoResultado, tipoR.indeterminado as lct_indeterminado')
                            ->addSelect('prc.fechaCreacion as prc_fechaCreacion, prz.fechaAlmacenado as prz_fechaAlmacenado')
                            ->addSelect('concat(pct.primerApellido, \' \', coalesce(pct.segundoApellido, \'\'), \', \', pct.primerNombre, \' \', coalesce(pct.segundoNombre, \'\')) as prc_paciente')
                            ->addSelect('stdroot.nombre as prc_origen, stdroot.id as prc_id_origen, ar.nombre as prc_areaAtencion, ar.id as prc_id_areaAtencion, atn.nombre as prc_atencion, atn.id as prc_id_atencion')
                            ->addSelect('concat(coalesce(empprc.apellido, \'\'), \', \', coalesce(empprc.nombre, \'\')) as prc_solicitante')
                            ->addSelect('concat(coalesce(emplct.apellido, \'\'), \', \', coalesce(emplct.nombre, \'\')) as lct_radiologo, emplct.id as lct_id_radiologo, tpEmp.tipo as lct_tipoEmpleado')
                            ->addSelect('case when (lctVal.id is not null) then concat(coalesce(lctVal.apellido, \'\'), \', \', coalesce(lctVal.nombre, \'\')) else \'\' end as lct_radiologoVal, lctVal.id as lct_id_radiologoVal')
                            ->addSelect('case when (lctSol.id is not null) then concat(coalesce(lctSol.apellido, \'\'), \', \', coalesce(lctSol.nombre, \'\')) else \'\' end as lct_radiologoSol, lctSol.id as lct_id_radiologoSol')
                            ->addSelect('stdref.nombre as prc_referido, stdref.id as prc_id_referido, stdiag.nombre as prc_diagnosticante, stdiag.id as prc_id_diagnosticante, stdlct.nombre as lct_solicitado, stdlct.id as lct_id_solicitado')
                            ->addSelect('m.nombrearea as prc_modalidad, m.id as prc_id_modalidad, prAtn.nombre as prc_prioridadAtencion, prAtn.codigo as prc_codigoPrioridad, frCt.nombre as prc_formaContacto, ctPct.parentesco as prc_contactoPaciente')
                            ->addSelect('usrRg.username as lct_usernameUserReg, usrRg.id as lct_id_userReg')
                            ->addSelect('concat(coalesce(usrRgEmp.apellido, \'\'), \', \', coalesce(usrRgEmp.nombre, \'\')) as lct_nombreUserReg')
                            ->addSelect('case when (tcnlprz.id is not null) then concat(coalesce(tcnlprz.apellido, \'\'), \', \', coalesce(tcnlprz.nombre, \'\')) else \'\' end as prz_tecnologo')
                            ->from('MinsalSimagdBundle:ImgLectura', 'lct')
                            ->innerJoin('lct.idEstadoLectura', 'statuslct')
                            ->innerJoin('lct.idTipoResultado', 'tipoR')
                            ->innerJoin('lct.idEmpleado', 'emplct')
                            ->leftJoin('lct.idPatronAsociado', 'ptrAsc')
                            ->leftJoin('lct.idRadiologoDesignadoAprobacion', 'lctVal')
                            ->leftJoin('lct.idRadiologoSolicita', 'lctSol')
                            ->leftJoin('lct.idEstudio', 'est')
                            ->leftJoin('est.idProcedimientoRealizado', 'prz')
                            ->leftJoin('prz.idEstadoProcedimientoRealizado', 'statusprz')
                            ->leftJoin('prz.idSolicitudEstudio', 'prc')
                            ->leftJoin('prz.idTecnologoRealiza', 'tcnlprz')
                            ->innerJoin('lct.idUserReg', 'usrRg')
                            ->leftJoin('prc.idAtenAreaModEstab', 'aams')
                            ->innerJoin('prc.idEmpleado', 'empprc')
                            ->leftJoin('prc.idExpediente', 'exp')
                            ->leftJoin('prc.idAreaServicioDiagnostico', 'm')
                            ->leftJoin('prc.idEstablecimientoReferido', 'stdref')
                            ->leftJoin('prc.idEstablecimientoDiagnosticante', 'stdiag')
                            ->leftJoin('lct.idEstablecimiento', 'stdlct')
                            ->leftJoin('prc.idPrioridadAtencion', 'prAtn')
                            ->leftJoin('prc.idFormaContacto', 'frCt')
                            ->leftJoin('prc.idContactoPaciente', 'ctPct')
                            ->leftJoin('aams.idAtencion', 'atn')
                            ->leftJoin('aams.idAreaModEstab', 'ams')
                            ->leftJoin('aams.idEstablecimiento', 'stdroot')
                            ->leftJoin('ams.idAreaAtencion', 'ar')
                            ->leftJoin('exp.idPaciente', 'pct')
                            ->innerJoin('usrRg.idEmpleado', 'usrRgEmp')
                            ->leftJoin('emplct.idTipoEmpleado', 'tpEmp')
                            ->where('lct.idEstablecimiento = :id_est_diag')
                            ->setParameter('id_est_diag', $id_estab)
                            ->orderBy('lct.fechaLectura', 'desc')
                            ->addOrderBy('lct.id', 'desc')
                            ->distinct();
        
        $query->leftJoin('prc.idExpedienteFicticio', 'unknExp')->leftJoin('MinsalSiapsBundle:MntExpediente', 'explocal',
                                    \Doctrine\ORM\Query\Expr\Join::WITH,
                                            $query->expr()->andx(
                                                $query->expr()->eq('pct.id', 'explocal.idPaciente'),
                                                $query->expr()->eq('explocal.idEstablecimiento', ':id_est_explocal')
                                            )
                            )
                            ->setParameter('id_est_explocal', $id_estab);
        
        /*
         * --| add filters from BSTABLE_FILTER to query
         */
        $simagd_er_model    = $this->getEntityManager()->getRepository('MinsalSimagdBundle:ImgSolicitudEstudio');
        $apply_filters      = $simagd_er_model->getBsTableFiltersV2($query, $bs_filters);
        if ($apply_filters !== false)
        {
            $query->andWhere($apply_filters);
        }
        /*
         * |-- END filters from BSTABLE_FILTER to query
         */

        return $query->getQuery()->getScalarResult();
    }

    public function obtenerPendientesLecturaV2($id_estab, $bs_filters = array())
    {
        /** SubQuery */
        $subQuery = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('lct')
                            ->from('MinsalSimagdBundle:ImgLectura', 'lct')
//                            ->where('lct.idEstadoLectura NOT IN ( 4, 5, 6 )')
                            ->andWhere('lct.idEstudio = pndL.idEstudio');

	/** SubQuery2 */
        $subQuery2 = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('lctEst')
                            ->from('MinsalSimagdBundle:ImgLecturaEstudio', 'lctEst')
//                            ->where('lctEst.idEstadoLectura NOT IN ( 4, 5, 6 )')
                            ->andWhere('lctEst.idEstudio = pndL.idEstudio');

        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder('pndL')
                            ->select('pndL')
                            ->addSelect('est')
                            ->addSelect('prz')
                            ->addSelect('prc')
                            ->addSelect('solcmpl')
                            ->addSelect('estPdr')
                            ->addSelect('lctPdr')
                            ->addSelect('explocal')->addSelect('unknExp')
                            ->addSelect('prAtn')
                            ->addSelect('statusprz.id as prz_id_estado, statusprz.nombreEstado as prz_estado, statusprz.codigo as prz_codEstado')
                            ->addSelect('concat(pct.primerApellido, \' \', coalesce(pct.segundoApellido, \'\'), \', \', pct.primerNombre, \' \', coalesce(pct.segundoNombre, \'\')) as prc_paciente')
                            ->addSelect('stdroot.nombre as prc_origen, stdroot.id as prc_id_origen, ar.nombre as prc_areaAtencion, ar.id as prc_id_areaAtencion, atn.nombre as prc_atencion, atn.id as prc_id_atencion')
                            ->addSelect('case when (empprc.id is not null) then concat(coalesce(empprc.apellido, \'\'), \', \', coalesce(empprc.nombre, \'\')) else \'\' end as prc_solicitante')
                            ->addSelect('case when (empcmpl.id is not null) then concat(coalesce(empcmpl.apellido, \'\'), \', \', coalesce(empcmpl.nombre, \'\')) else \'\' end as solcmpl_solicitante')
                            ->addSelect('case when (empradxpndL.id is not null) then concat(coalesce(empradxpndL.apellido, \'\'), \', \', coalesce(empradxpndL.nombre, \'\')) else \'\' end as pndL_radiologoAnexa, empradxpndL.id as pndL_id_radiologoAnexa, tpEmp.tipo as pndL_tipoEmpleado')
                            ->addSelect('concat(coalesce(tcnlprz.apellido, \'\'), \', \', coalesce(tcnlprz.nombre, \'\')) as prz_tecnologo, tcnlprz.id as prz_id_tecnologo')
                            ->addSelect('stdPacs.nombre as est_establecimiento, stdPacs.id as est_id_establecimiento, stdPndL.nombre as pndL_establecimiento, stdPndL.id as pndL_id_establecimiento')
                            ->addSelect('m.nombrearea as prc_modalidad, m.id as prc_id_modalidad, prAtn.nombre as prc_prioridadAtencion, prAtn.codigo as prc_codigoPrioridad, frCt.nombre as prc_formaContacto, ctPct.parentesco as prc_contactoPaciente')
                            ->addSelect('mcmpl.nombrearea as solcmpl_modalidad, prAtnCmpl.nombre as solcmpl_prioridadAtencion, prAtnCmpl.codigo as solcmpl_codigoPrioridad')
                            ->from('MinsalSimagdBundle:ImgPendienteLectura', 'pndL')
                            ->leftJoin('pndL.idRadiologoAnexa', 'empradxpndL')
                            ->innerJoin('pndL.idEstudio', 'est')
                            ->innerJoin('est.idProcedimientoRealizado', 'prz')
                            ->leftJoin('prz.idSolicitudEstudio', 'prc')
                            ->innerJoin('prz.idTecnologoRealiza', 'tcnlprz')
                            ->innerJoin('prz.idEstadoProcedimientoRealizado', 'statusprz')
                            ->leftJoin('prc.idAtenAreaModEstab', 'aams')
                            ->leftJoin('prc.idEmpleado', 'empprc')
                            ->innerJoin('est.idExpediente', 'exp')
                            ->leftJoin('prc.idAreaServicioDiagnostico', 'm')
                            ->innerJoin('est.idEstablecimiento', 'stdPacs')
                            ->innerJoin('pndL.idEstablecimiento', 'stdPndL')
                            ->leftJoin('prc.idPrioridadAtencion', 'prAtn')
                            ->leftJoin('prc.idFormaContacto', 'frCt')
                            ->leftJoin('prc.idContactoPaciente', 'ctPct')
                            ->leftJoin('aams.idAtencion', 'atn')
                            ->leftJoin('aams.idAreaModEstab', 'ams')
                            ->leftJoin('aams.idEstablecimiento', 'stdroot')
                            ->leftJoin('ams.idAreaAtencion', 'ar')
                            ->innerJoin('exp.idPaciente', 'pct')
                            ->leftJoin('empradxpndL.idTipoEmpleado', 'tpEmp')
                            ->leftJoin('prz.idSolicitudEstudioComplementario', 'solcmpl')
                            ->leftJoin('solcmpl.idAreaServicioDiagnostico', 'mcmpl')
                            ->leftJoin('solcmpl.idRadiologoSolicita', 'empcmpl')
                            ->leftJoin('solcmpl.idPrioridadAtencion', 'prAtnCmpl')
                            ->leftJoin('solcmpl.idEstudioPadre', 'estPdr')
                            ->leftJoin('MinsalSimagdBundle:ImgLectura', 'lctPdr',
                                    \Doctrine\ORM\Query\Expr\Join::WITH,
                                    'estPdr.id = lctPdr.idEstudio')
                            ->where('pndL.idEstablecimiento = :id_est_diag')
                            ->setParameter('id_est_diag', $id_estab)
                            ->orderBy('pndL.fechaIngresoLista', 'asc')
                            ->addOrderBy('pndL.id', 'desc');
        
        $query->leftJoin('prc.idExpedienteFicticio', 'unknExp')->leftJoin('MinsalSiapsBundle:MntExpediente', 'explocal',
                                    \Doctrine\ORM\Query\Expr\Join::WITH,
                                            $query->expr()->andx(
                                                $query->expr()->eq('pct.id', 'explocal.idPaciente'),
                                                $query->expr()->eq('explocal.idEstablecimiento', ':id_est_explocal')
                                            )
                            )
                            ->setParameter('id_est_explocal', $id_estab);

	/** Añadir establecimiento en parameter, en caso que pueda diagnosticarse en varios establecimientos */
        $query->andWhere($query->expr()->andx(
                            $query->expr()->not($query->expr()->exists($subQuery->getDql())),
                            $query->expr()->not($query->expr()->exists($subQuery2->getDql()))
                        ))
			    ->distinct();
        
        /*
         * --| add filters from BSTABLE_FILTER to query
         */
        $simagd_er_model    = $this->getEntityManager()->getRepository('MinsalSimagdBundle:ImgSolicitudEstudio');
        $apply_filters      = $simagd_er_model->getBsTableFiltersV2($query, $bs_filters);
        if ($apply_filters !== false)
        {
            $query->andWhere($apply_filters);
        }
        /*
         * |-- END filters from BSTABLE_FILTER to query
         */

        return $query->getQuery()->getScalarResult();
    }

    public function obtenerPendientesLecturaPersonalV2($id_estab, $sessionUser, $bs_filters = array())
    {
        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder('pndL')
                            ->select('pndL')
                            ->addSelect('lct')
                            ->addSelect('ptrAsc')
                            ->addSelect('est')
                            ->addSelect('prz')
                            ->addSelect('prc')
                            ->addSelect('solcmpl')
                            ->addSelect('estPdr')
                            ->addSelect('explocal')->addSelect('unknExp')
                            ->addSelect('prAtn')
                            ->addSelect('statusprz.id as prz_id_estado, statusprz.nombreEstado as prz_estado, statusprz.codigo as prz_codEstado')
                            ->addSelect('statuslct.id as lct_id_estado, statuslct.nombreEstado as lct_estado, statuslct.codigo as lct_codEstado, tipoR.id as lct_id_tipoResultado, tipoR.nombreTipo as lct_tipoResultado, tipoR.indeterminado as lct_indeterminado')
                            ->addSelect('concat(coalesce(emplct.apellido, \'\'), \', \', coalesce(emplct.nombre, \'\')) as lct_radiologo, emplct.id as lct_id_radiologo, tpEmpLct.tipo as lct_tipoEmpleado')
                            ->addSelect('concat(pct.primerApellido, \' \', coalesce(pct.segundoApellido, \'\'), \', \', pct.primerNombre, \' \', coalesce(pct.segundoNombre, \'\')) as prc_paciente')
                            ->addSelect('stdroot.nombre as prc_origen, stdroot.id as prc_id_origen, ar.nombre as prc_areaAtencion, ar.id as prc_id_areaAtencion, atn.nombre as prc_atencion, atn.id as prc_id_atencion')
                            ->addSelect('case when (empprc.id is not null) then concat(coalesce(empprc.apellido, \'\'), \', \', coalesce(empprc.nombre, \'\')) else \'\' end as prc_solicitante')
                            ->addSelect('case when (empcmpl.id is not null) then concat(coalesce(empcmpl.apellido, \'\'), \', \', coalesce(empcmpl.nombre, \'\')) else \'\' end as solcmpl_solicitante')
                            ->addSelect('case when (emp.id is not null) then concat(coalesce(emp.apellido, \'\'), \', \', coalesce(emp.nombre, \'\')) else \'\' end as pndL_radiologoAnexa, emp.id as pndL_id_radiologoAnexa, tpEmp.tipo as pndL_tipoEmpleado')
                            ->addSelect('concat(coalesce(tcnlprz.apellido, \'\'), \', \', coalesce(tcnlprz.nombre, \'\')) as prz_tecnologo, tcnlprz.id as prz_id_tecnologo')
                            ->addSelect('stdPacs.nombre as est_establecimiento, stdPacs.id as est_id_establecimiento, stdPndL.nombre as pndL_establecimiento, stdPndL.id as pndL_id_establecimiento')
                            ->addSelect('m.nombrearea as prc_modalidad, m.id as prc_id_modalidad, prAtn.nombre as prc_prioridadAtencion, prAtn.codigo as prc_codigoPrioridad, frCt.nombre as prc_formaContacto, ctPct.parentesco as prc_contactoPaciente')
                            ->addSelect('mcmpl.nombrearea as solcmpl_modalidad, prAtnCmpl.nombre as solcmpl_prioridadAtencion, prAtnCmpl.codigo as solcmpl_codigoPrioridad')
                            ->from('MinsalSimagdBundle:ImgPendienteLectura', 'pndL')
                            ->innerJoin('MinsalSimagdBundle:ImgLectura', 'lct',
                                    \Doctrine\ORM\Query\Expr\Join::WITH,
                                    'lct.idEstudio = pndL.idEstudio')
                            ->innerJoin('lct.idEstadoLectura', 'statuslct')
                            ->innerJoin('lct.idTipoResultado', 'tipoR')
                            ->innerJoin('lct.idEmpleado', 'emplct')
                            ->leftJoin('lct.idPatronAsociado', 'ptrAsc')
                            ->leftJoin('pndL.idRadiologoAnexa', 'emp')
                            ->innerJoin('pndL.idEstudio', 'est')
                            ->innerJoin('est.idProcedimientoRealizado', 'prz')
                            ->innerJoin('prz.idEstadoProcedimientoRealizado', 'statusprz')
                            ->leftJoin('prz.idSolicitudEstudio', 'prc')
                            ->innerJoin('prz.idTecnologoRealiza', 'tcnlprz')
                            ->leftJoin('prc.idAtenAreaModEstab', 'aams')
                            ->leftJoin('prc.idEmpleado', 'empprc')
                            ->innerJoin('est.idExpediente', 'exp')
                            ->leftJoin('prc.idAreaServicioDiagnostico', 'm')
                            ->innerJoin('est.idEstablecimiento', 'stdPacs')
                            ->innerJoin('pndL.idEstablecimiento', 'stdPndL')
                            ->leftJoin('prc.idPrioridadAtencion', 'prAtn')
                            ->leftJoin('prc.idFormaContacto', 'frCt')
                            ->leftJoin('prc.idContactoPaciente', 'ctPct')
                            ->leftJoin('aams.idAtencion', 'atn')
                            ->leftJoin('aams.idAreaModEstab', 'ams')
                            ->leftJoin('aams.idEstablecimiento', 'stdroot')
                            ->leftJoin('ams.idAreaAtencion', 'ar')
                            ->innerJoin('exp.idPaciente', 'pct')
                            ->leftJoin('emplct.idTipoEmpleado', 'tpEmp')
                            ->leftJoin('emplct.idTipoEmpleado', 'tpEmpLct')
                            ->leftJoin('prz.idSolicitudEstudioComplementario', 'solcmpl')
                            ->leftJoin('solcmpl.idAreaServicioDiagnostico', 'mcmpl')
                            ->leftJoin('solcmpl.idRadiologoSolicita', 'empcmpl')
                            ->leftJoin('solcmpl.idPrioridadAtencion', 'prAtnCmpl')
                            ->leftJoin('solcmpl.idEstudioPadre', 'estPdr')
                            ->where('pndL.idEstablecimiento = :id_est_lct')
                            ->setParameter('id_est_lct', $id_estab)
                            ->andWhere('lct.idUserReg = :id_user')
                            ->setParameter('id_user', $sessionUser)
                            ->andWhere('statuslct.codigo NOT IN (:status_lct_cod)')
                            ->setParameter('status_lct_cod', array('LDO', 'DCT', 'RZD'))
                            ->orderBy('pndL.fechaIngresoLista', 'asc')
                            ->addOrderBy('pndL.id', 'desc')
                            ->distinct();
        
        $query->leftJoin('prc.idExpedienteFicticio', 'unknExp')->leftJoin('MinsalSiapsBundle:MntExpediente', 'explocal',
                                    \Doctrine\ORM\Query\Expr\Join::WITH,
                                            $query->expr()->andx(
                                                $query->expr()->eq('pct.id', 'explocal.idPaciente'),
                                                $query->expr()->eq('explocal.idEstablecimiento', ':id_est_explocal')
                                            )
                            )
                            ->setParameter('id_est_explocal', $id_estab);
        
        /*
         * --| add filters from BSTABLE_FILTER to query
         */
        $simagd_er_model    = $this->getEntityManager()->getRepository('MinsalSimagdBundle:ImgSolicitudEstudio');
        $apply_filters      = $simagd_er_model->getBsTableFiltersV2($query, $bs_filters);
        if ($apply_filters !== false)
        {
            $query->andWhere($apply_filters);
        }
        /*
         * |-- END filters from BSTABLE_FILTER to query
         */

        return $query->getQuery()->getScalarResult();
    }
    
    public function getSourceDataTipo($id_estab, $alias = 'tipoR')
    {
        $entity     = 'ImgCtlTipoResultado';
        if ($alias === 'tipoN')
        {
            $entity = 'ImgCtlTipoNotaDiagnostico';
        }
        $query      = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('type.id as id, type.nombreTipo as text, type.codigo as cod')
                            ->from('MinsalSimagdBundle:' . $entity, 'type')
                            ->orderBy('type.id', 'asc');
        
        return $query->getQuery()->getResult();
    }
    
}
