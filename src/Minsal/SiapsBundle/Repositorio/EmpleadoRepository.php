<?php

namespace Minsal\SiapsBundle\Repositorio;

use Doctrine\ORM\EntityRepository;

/**
 * EmpleadoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EmpleadoRepository extends EntityRepository
{
    /**
     * Método perteneciente a módulo <simagd>
     * @param type $idEstablecimiento
     * @return type
     */
    public function obtenerEmpleadosPreinscriptores($idEstablecimiento)
    {
        /** SubQuery */
        $subQuery = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('prc')
                            ->from('MinsalSimagdBundle:ImgSolicitudEstudio', 'prc')
                            ->innerJoin('prc.idAtenAreaModEstab', 'aams')
                            ->where('emp.id = prc.idEmpleado');

        $subQuery->andWhere($subQuery->expr()->orx(
                            $subQuery->expr()->eq('prc.idEstablecimientoReferido', ':id_est_ref'),
                            $subQuery->expr()->eq('prc.idEstablecimientoDiagnosticante', ':id_est_diag'),
                            $subQuery->expr()->eq('aams.idEstablecimiento', ':id_est')
                        ));
                
        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('emp')
                            ->from('MinsalSiapsBundle:MntEmpleado', 'emp');
        
        $query->where($query->expr()->exists($subQuery->getDql()))
                            ->setParameter('id_est_ref', $idEstablecimiento)
                            ->setParameter('id_est_diag', $idEstablecimiento)
                            ->setParameter('id_est', $idEstablecimiento);
        
        $query->orderBy('emp.apellido')
                            ->addOrderBy('emp.nombre');
                
        $query->distinct();
        
        return $query;
    }
    
    /**
     * Método perteneciente a módulo <simagd>
     * @param type $idEstablecimiento
     * @param type $empSol
     * @return type
     */
    public function obtenerEmpleadosPrgTcnl($idEstablecimiento, $empSol = 'idEmpleado')
    {
        /** SubQuery */
        $subQuery = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('cit')
                            ->from('MinsalSimagdBundle:ImgCita', 'cit')
                            ->where('emp.id = cit.' . $empSol)
                            ->andWhere('cit.idEstablecimiento = :id_est');
                
        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('emp')
                            ->from('MinsalSiapsBundle:MntEmpleado', 'emp');
        
        $query->where($query->expr()->exists($subQuery->getDql()))
                            ->setParameter('id_est', $idEstablecimiento);
        
        $query->orderBy('emp.apellido')
                            ->addOrderBy('emp.nombre');
                
        $query->distinct();
        
        return $query;
    }
    
    /**
     * Método perteneciente a módulo <simagd>
     * @param type $idEstablecimiento
     * @return type
     */
    public function obtenerTecnologosExaminantes($idEstablecimiento)
    {
        /** SubQuery */
        $subQuery = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('prz')
                            ->from('MinsalSimagdBundle:ImgProcedimientoRealizado', 'prz')
                            ->innerJoin('prz.idSolicitudEstudio', 'prc')
                            ->innerJoin('prc.idAtenAreaModEstab', 'aams')
                            ->where('emp.id = prz.idTecnologoRealiza');

        $subQuery->andWhere($subQuery->expr()->orx(
                            $subQuery->expr()->eq('prc.idEstablecimientoReferido', ':id_est_ref'),
                            $subQuery->expr()->eq('prc.idEstablecimientoDiagnosticante', ':id_est_diag'),
                            $subQuery->expr()->eq('aams.idEstablecimiento', ':id_est')
                        ));
                
        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('emp')
                            ->from('MinsalSiapsBundle:MntEmpleado', 'emp');
        
        $query->where($query->expr()->exists($subQuery->getDql()))
                            ->setParameter('id_est_ref', $idEstablecimiento)
                            ->setParameter('id_est_diag', $idEstablecimiento)
                            ->setParameter('id_est', $idEstablecimiento);
        
        $query->orderBy('emp.apellido')
                            ->addOrderBy('emp.nombre');
                
        $query->distinct();
        
        return $query;
    }
    
    /**
     * Método perteneciente a módulo <simagd>
     * @param type $idEstablecimiento
     * @return type
     */
    public function obtenerRadiologosInterpretes($idEstablecimiento)
    {
        /** SubQuery */
        $subQuery = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('lct')
                            ->from('MinsalSimagdBundle:ImgLectura', 'lct')
                            ->where('emp.id = lct.idEmpleado')
                            ->andWhere('lct.idEstablecimiento = :id_est');
                
        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('emp')
                            ->from('MinsalSiapsBundle:MntEmpleado', 'emp');
        
        $query->where($query->expr()->exists($subQuery->getDql()))
                            ->setParameter('id_est', $idEstablecimiento);
        
        $query->orderBy('emp.apellido')
                            ->addOrderBy('emp.nombre');
                
        $query->distinct();
        
        return $query;
    }
    
    /**
     * Método perteneciente a módulo <simagd>
     * @param type $idEstablecimiento
     * @return type
     */
    public function obtenerTranscriptoresDiagnosticos($idEstablecimiento)
    {
        /** SubQuery */
        $subQuery = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('diag')
                            ->from('MinsalSimagdBundle:ImgDiagnostico', 'diag')
                            ->innerJoin('MinsalSimagdBundle:ImgLectura', 'lct')
                            ->where('emp.id = diag.idEmpleado')
                            ->andWhere('lct.idEstablecimiento = :id_est');
                
        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('emp')
                            ->from('MinsalSiapsBundle:MntEmpleado', 'emp');
        
        $query->where($query->expr()->exists($subQuery->getDql()))
                            ->setParameter('id_est', $idEstablecimiento);
        
        $query->orderBy('emp.apellido')
                            ->addOrderBy('emp.nombre');
                
        $query->distinct();
        
        return $query;
    }
    
    /**
     * Método perteneciente a módulo <simagd>
     * @param type $idEstablecimiento
     * @return type
     */
    public function obtenerEmpleadosPorTipoOperaciones($idEstablecimiento, $arrayTipos)
    {
        /** SubQuery */
        $subQuery = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('ees')
                            ->from('MinsalSiapsBundle:MntEmpleadoEspecialidadEstab', 'ees')
                            ->innerJoin('ees.idAtenAreaModEstab', 'aams')
                            ->where('emp.id = ees.idEmpleado')
                            ->andWhere('aams.idEstablecimiento = :id_est');
                
        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('emp')
                            ->from('MinsalSiapsBundle:MntEmpleado', 'emp');
        
        $query->where($query->expr()->in('emp.idTipoEmpleado', $arrayTipos));
        
        $query->andWhere($query->expr()->exists($subQuery->getDql()))
                            ->setParameter('id_est', $idEstablecimiento);
        
        $query->orderBy('emp.idTipoEmpleado')
                            ->addOrderBy('emp.apellido')
                            ->addOrderBy('emp.nombre');
                
        $query->distinct();
        
        return $query;
    }
    
    /**
     * Método perteneciente a módulo <simagd>
     * @param type $idEstablecimiento
     * @return type
     */
    public function obtenerTodosRadiologosInterpretes( )
    {
        /** SubQuery */
        $subQuery = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('lct')
                            ->from('MinsalSimagdBundle:ImgLectura', 'lct')
                            ->where('emp.id = lct.idEmpleado');
                
        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('emp')
                            ->from('MinsalSiapsBundle:MntEmpleado', 'emp');
        
        $query->where($query->expr()->exists($subQuery->getDql()));
        
        $query->orderBy('emp.apellido')
                            ->addOrderBy('emp.nombre');
                
        $query->distinct();
        
        return $query;
    }
    
    /**
     * Método perteneciente a módulo <simagd>
     * @param type $idEstablecimiento
     * @return type
     */
    public function obtenerCreadoresNotaDiagnostico( )
    {
        /** SubQuery */
        $subQuery = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('notdiag')
                            ->from('MinsalSimagdBundle:ImgNotaDiagnostico', 'notdiag')
                            ->where('emp.id = notdiag.idEmpleado');
                
        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('emp')
                            ->from('MinsalSiapsBundle:MntEmpleado', 'emp');
        
        $query->where($query->expr()->exists($subQuery->getDql()));
        
        $query->orderBy('emp.apellido')
                            ->addOrderBy('emp.nombre');
                
        $query->distinct();
        
        return $query;
    }
    
    /**
     * Método perteneciente a módulo <simagd>
     * @return type
     */
    public function obtenerTodosTecnologosExaminantes( )
    {
        /** SubQuery */
        $subQuery = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('prz')
                            ->from('MinsalSimagdBundle:ImgProcedimientoRealizado', 'prz')
                            ->where('emp.id = prz.idTecnologoRealiza');
                
        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('emp')
                            ->from('MinsalSiapsBundle:MntEmpleado', 'emp');
        
        $query->where($query->expr()->exists($subQuery->getDql()));
        
        $query->orderBy('emp.apellido')
                            ->addOrderBy('emp.nombre');
                
        $query->distinct();
        
        return $query;
    }
    
    /**
     * Método perteneciente a módulo <simagd>
     * @return type
     */
    public function obtenerTodosTranscriptoresDiagnosticos( )
    {
        /** SubQuery */
        $subQuery = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('diag')
                            ->from('MinsalSimagdBundle:ImgDiagnostico', 'diag')
                            ->where('emp.id = diag.idEmpleado');
                
        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('emp')
                            ->from('MinsalSiapsBundle:MntEmpleado', 'emp');
        
        $query->where($query->expr()->exists($subQuery->getDql()));
        
        $query->orderBy('emp.apellido')
                            ->addOrderBy('emp.nombre');
                
        $query->distinct();
        
        return $query;
    }
    
    /**
     * Método perteneciente a módulo <simagd>
     * @param type $idEstablecimiento
     * @return type
     */
    public function obtenerTecnologosExaminantesEstab( $idEstablecimiento )
    {
        /** SubQuery */
        $subQuery = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('prz')
                            ->from('MinsalSimagdBundle:ImgProcedimientoRealizado', 'prz')
                            ->innerJoin('prz.idSolicitudEstudio', 'prc')
                            ->innerJoin('prc.idAtenAreaModEstab', 'aams')
                            ->where('emp.id = prz.idTecnologoRealiza')
                            ->andWhere('prc.idEstablecimientoReferido = :id_est_ref');
                
        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('emp')
                            ->from('MinsalSiapsBundle:MntEmpleado', 'emp');
        
        $query->where($query->expr()->exists($subQuery->getDql()))
                            ->setParameter('id_est_ref', $idEstablecimiento);
        
        $query->orderBy('emp.apellido')
                            ->addOrderBy('emp.nombre');
                
        $query->distinct();
        
        return $query->getQuery()->getResult();
    }

    /**
     * Método perteneciente a módulo <simagd>
     * @param type $idEstablecimiento
     * @return type
     */
    public function obtenerEmpleadosPreinscriptoresEstab( $idEstablecimiento )
    {
        /** SubQuery */
        $subQuery = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('prc')
                            ->from('MinsalSimagdBundle:ImgSolicitudEstudio', 'prc')
                            ->innerJoin('prc.idAtenAreaModEstab', 'aams')
                            ->where('emp.id = prc.idEmpleado')
                            ->andWhere('aams.idEstablecimiento = :id_est');
                
        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('emp')
                            ->from('MinsalSiapsBundle:MntEmpleado', 'emp');
        
        $query->where($query->expr()->exists($subQuery->getDql()))
                            ->setParameter('id_est', $idEstablecimiento);
        
        $query->orderBy('emp.apellido')
                            ->addOrderBy('emp.nombre');
                
        $query->distinct();
        
        return $query->getQuery()->getResult();
    }

    /**
     * Método perteneciente a módulo <simagd>
     * @param type $idEstablecimiento
     * @return type
     */
    public function obtenerEmpleadosRayosXCargoV2($idEstablecimiento, $arrayTipos, $atencionImg = '97')
    {
        /** SubQuery */
        $subQuery = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('ees')
                            ->from('MinsalSiapsBundle:MntEmpleadoEspecialidadEstab', 'ees')
                            ->innerJoin('ees.idAtenAreaModEstab', 'aams')
                            ->where('emp.id = ees.idEmpleado')
                            ->andWhere('aams.idAtencion = :id_atn')
                            ->andWhere('aams.idEstablecimiento = :id_est');

        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('emp')
                            ->from('MinsalSiapsBundle:MntEmpleado', 'emp');

        $query->where($query->expr()->in('emp.idTipoEmpleado', $arrayTipos));

        $query->andWhere($query->expr()->exists($subQuery->getDql()))
                            ->setParameter('id_atn', $atencionImg)
                            ->setParameter('id_est', $idEstablecimiento);

        $query->orderBy('emp.idTipoEmpleado')
                            ->addOrderBy('emp.apellido')
                            ->addOrderBy('emp.nombre');

        $query->distinct();

        return $query;
    }

    /**
     * Método perteneciente a módulo <simagd>
     * @param type $idEstablecimiento
     * @return type
     */
    public function getSourceDataSolicitante($idEstablecimiento, $arrayTipos = array(1, 2, 4))
    {
        /*
         * SubQuery
         * solicitud
         */
        $subQuery = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('prc')
                            ->from('MinsalSimagdBundle:ImgSolicitudEstudio', 'prc')
                            ->innerJoin('prc.idAtenAreaModEstab', 'aams')
                            ->where('emp.id = prc.idEmpleado');

        $subQuery->andWhere($subQuery->expr()->orx(
                            $subQuery->expr()->eq('prc.idEstablecimientoReferido', ':id_est_ref'),
                            $subQuery->expr()->eq('prc.idEstablecimientoDiagnosticante', ':id_est_diag'),
                            $subQuery->expr()->eq('aams.idEstablecimiento', ':id_est')
                        ));
                
        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('emp.id as id, concat(coalesce(emp.apellido, \'\'), \', \', coalesce(emp.nombre, \'\')) as text, IDENTITY(emp.idTipoEmpleado) as tipo, emp.apellido, emp.nombre, IDENTITY(emp.idTipoEmpleado)')
                            ->from('MinsalSiapsBundle:MntEmpleado', 'emp');
        

        $query->where($query->expr()->in('emp.idTipoEmpleado', $arrayTipos))
                            ->andWhere($query->expr()->exists($subQuery->getDql()))
                            ->setParameter('id_est_ref', $idEstablecimiento)
                            ->setParameter('id_est_diag', $idEstablecimiento)
                            ->setParameter('id_est', $idEstablecimiento)
                            ->orderBy('emp.idTipoEmpleado')
                            ->addOrderBy('emp.apellido')
                            ->addOrderBy('emp.nombre')
                            ->distinct();
        
        return $query->getQuery()->getScalarResult();
    }

    /**
     * Método perteneciente a módulo <simagd>
     * @param type $idEstablecimiento
     * @return type
     */
    public function getSourceDataRadiologo($idEstablecimiento, $arrayTipos = array(4, 5), $atencionImg = '97')
    {
        /*
         * SubQuery 1
         * especialidad
         */
        $subQuery = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('ees')
                            ->from('MinsalSiapsBundle:MntEmpleadoEspecialidadEstab', 'ees')
                            ->innerJoin('ees.idAtenAreaModEstab', 'aams')
                            ->where('emp.id = ees.idEmpleado')
                            ->andWhere('aams.idAtencion = :id_atn');
        /*
         * SubQuery 2
         * Examen realizado por empleado
         */
        $subQuery2 = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('prz')
                            ->from('MinsalSimagdBundle:ImgProcedimientoRealizado', 'prz')
                            ->leftJoin('prz.idSolicitudEstudio', 'prc')
                            ->leftJoin('prz.idSolicitudEstudioComplementario', 'solcmpl')
                            ->where('emp.id = prz.idTecnologoRealiza');

        $subQuery2->andWhere($subQuery2->expr()->orx(
                            $subQuery2->expr()->eq('prc.idEstablecimientoReferido', ':id_est_ref'),
                            $subQuery2->expr()->eq('solcmpl.idEstablecimientoSolicitado', ':id_est_sol')
                        ));
        /*
         * SubQuery 3
         * lectura realizada
         */
        $subQuery3 = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('lct')
                            ->from('MinsalSimagdBundle:ImgLectura', 'lct')
                            ->where('emp.id = lct.idEmpleado')
                            ->andWhere('lct.idEstablecimiento = :id_est_lct');
        /*
         * SubQuery 4
         * cita asignada
         */
        $subQuery4 = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('cit')
                            ->from('MinsalSimagdBundle:ImgCita', 'cit')
                            ->where('emp.id = cit.idEmpleado')
                            ->andWhere('cit.idEstablecimiento = :id_est_cit');
        /*
         * SubQuery 5
         * bloqueo agregado
         */
        $subQuery5 = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('blAgd')
                            ->from('MinsalSimagdBundle:ImgBloqueoAgenda', 'blAgd')
                            ->where('emp.id = blAgd.idRadiologoBloqueo')
                            ->andWhere('blAgd.idEstablecimiento = :id_est_blAgd');


        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('emp.id as id, concat(coalesce(emp.apellido, \'\'), \', \', coalesce(emp.nombre, \'\')) as text, IDENTITY(emp.idTipoEmpleado) as tipo, emp.apellido, emp.nombre, IDENTITY(emp.idTipoEmpleado)')
                            ->from('MinsalSiapsBundle:MntEmpleado', 'emp');

        $query->where($query->expr()->in('emp.idTipoEmpleado', $arrayTipos))
                            ->andWhere($query->expr()->exists($subQuery->getDql()))
                            ->setParameter('id_atn', $atencionImg)
                            ->andWhere($query->expr()->orx(
				$query->expr()->exists($subQuery2->getDql()),
				$query->expr()->exists($subQuery3->getDql()),
				$query->expr()->exists($subQuery4->getDql()),
				$query->expr()->exists($subQuery5->getDql())
			    ))
                            ->setParameter('id_est_ref', $idEstablecimiento)
                            ->setParameter('id_est_sol', $idEstablecimiento)
                            ->setParameter('id_est_lct', $idEstablecimiento)
                            ->setParameter('id_est_cit', $idEstablecimiento)
                            ->setParameter('id_est_blAgd', $idEstablecimiento)
                            ->orderBy('emp.idTipoEmpleado')
                            ->addOrderBy('emp.apellido')
                            ->addOrderBy('emp.nombre')
                            ->distinct();
        
        return $query->getQuery()->getScalarResult();
    }

    /**
     * Método perteneciente a módulo <simagd>
     * @param type $idEstablecimiento
     * @return type
     */
    public function getSourceDataAdministrativo($idEstablecimiento, $arrayTipos = array(1, 2, 6, 7), $atencionImg = '97')
    {
        /*
         * SubQuery 1
         * especialidad
         */
        $subQuery = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('ees')
                            ->from('MinsalSiapsBundle:MntEmpleadoEspecialidadEstab', 'ees')
                            ->innerJoin('ees.idAtenAreaModEstab', 'aams')
                            ->where('emp.id = ees.idEmpleado')
                            ->andWhere('aams.idAtencion = :id_atn')
                            ->andWhere('aams.idEstablecimiento = :id_est_cit');

        /** Query */
        $query = $this->getEntityManager()
                        ->createQueryBuilder()
                            ->select('emp.id as id, concat(coalesce(emp.apellido, \'\'), \', \', coalesce(emp.nombre, \'\')) as text, IDENTITY(emp.idTipoEmpleado) as tipo, emp.apellido, emp.nombre, IDENTITY(emp.idTipoEmpleado)')
                            ->from('MinsalSiapsBundle:MntEmpleado', 'emp');

        $query->where($query->expr()->in('emp.idTipoEmpleado', $arrayTipos))
                            ->andWhere($query->expr()->exists($subQuery->getDql()))
                            ->setParameter('id_atn', $atencionImg)
                            ->setParameter('id_est_cit', $idEstablecimiento)
                            ->orderBy('emp.idTipoEmpleado')
                            ->addOrderBy('emp.apellido')
                            ->addOrderBy('emp.nombre')
                            ->distinct();
        
        return $query->getQuery()->getScalarResult();
    }
    
}
